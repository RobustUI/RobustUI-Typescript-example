/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t={4143:(t,e,n)=>{n.r(e),n.d(e,{ArgumentOutOfRangeError:()=>j.W,AsyncSubject:()=>h.c,BehaviorSubject:()=>c.X,ConnectableObservable:()=>i.c,EMPTY:()=>H.E,EmptyError:()=>V.K,GroupedObservable:()=>o.T,NEVER:()=>lt,Notification:()=>E.P,NotificationKind:()=>E.W,ObjectUnsubscribedError:()=>Z.N,Observable:()=>r.y,ReplaySubject:()=>a.t,Scheduler:()=>_.b,Subject:()=>u.xQ,Subscriber:()=>T.L,Subscription:()=>S.w,TimeoutError:()=>P.W,UnsubscriptionError:()=>k.B,VirtualAction:()=>g,VirtualTimeScheduler:()=>x,animationFrame:()=>w,animationFrameScheduler:()=>m,asap:()=>l.e,asapScheduler:()=>l.E,async:()=>f.P,asyncScheduler:()=>f.z,bindCallback:()=>M,bindNodeCallback:()=>B,combineLatest:()=>K.aj,concat:()=>Q.z,config:()=>Ot.v,defer:()=>q.P,empty:()=>H.c,forkJoin:()=>J,from:()=>G.D,fromEvent:()=>et,fromEventPattern:()=>rt,generate:()=>it,identity:()=>C.y,iif:()=>st,interval:()=>ct,isObservable:()=>O,merge:()=>ht.T,never:()=>ft,noop:()=>N.Z,observable:()=>s.L,of:()=>pt.of,onErrorResumeNext:()=>dt,pairs:()=>bt,partition:()=>xt,pipe:()=>I.z,queue:()=>p.c,queueScheduler:()=>p.N,race:()=>gt.S3,range:()=>_t,scheduled:()=>Ct.x,throwError:()=>Tt._,timer:()=>Et.H,using:()=>It,zip:()=>Nt.$R});var r=n(2772),i=n(3140),o=n(1120),s=n(5050),u=n(211),c=n(9233),a=n(2630),h=n(364),l=n(6650),f=n(964),p=n(2546),d=n(655),b=n(6114),v=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return d.ZT(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(b.o),y=n(8399),m=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return d.ZT(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(y.v))(v),w=m,x=function(t){function e(e,n){void 0===e&&(e=g),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return d.ZT(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(y.v),g=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return d.ZT(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(b.o),_=n(8725),S=n(8760),T=n(979),E=n(2632),I=n(2561),N=n(3306),C=n(3608);function O(t){return!!t&&(t instanceof r.y||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var j=n(6565),V=n(6929),Z=n(1016),k=n(8782),P=n(1462),L=n(5709),A=n(3642),D=n(9026),z=n(7507);function M(t,e,n){if(e){if(!(0,z.K)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return M(t,n).apply(void 0,r).pipe((0,L.U)((function(t){return(0,D.k)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o,s=this,u={context:s,subject:o,callbackFunc:t,scheduler:n};return new r.y((function(r){if(n){var i={args:e,subscriber:r,params:u};return n.schedule(W,0,i)}if(!o){o=new h.c;try{t.apply(s,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){(0,A._)(o)?o.error(t):console.warn(t)}}return o.subscribe(r)}))}}function W(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,u=i.scheduler,c=i.subject;if(!c){c=i.subject=new h.c;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(u.schedule(F,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function F(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function B(t,e,n){if(e){if(!(0,z.K)(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return B(t,n).apply(void 0,r).pipe((0,L.U)((function(t){return(0,D.k)(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new r.y((function(r){var i=o.context,s=o.subject;if(n)return n.schedule(Y,0,{params:o,subscriber:r,context:i});if(!s){s=o.subject=new h.c;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){(0,A._)(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function Y(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,u=n.scheduler,c=n.subject;if(!c){c=n.subject=new h.c;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(u.schedule(U,0,{err:r,subject:c}));else{var i=t.length<=1?t[0]:t;e.add(u.schedule(R,0,{value:i,subject:c}))}}]))}catch(t){this.add(u.schedule(U,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function R(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function U(t){var e=t.err;t.subject.error(e)}var K=n(5142),Q=n(9795),q=n(1410),H=n(5631),$=n(2009),G=n(5760);function J(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if((0,D.k)(n))return X(n,null);if((0,$.K)(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return X(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return X(t=1===t.length&&(0,D.k)(t[0])?t[0]:t,null).pipe((0,L.U)((function(t){return i.apply(void 0,t)})))}return X(t,null)}function X(t,e){return new r.y((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,u=function(u){var c=(0,G.D)(t[u]),a=!1;n.add(c.subscribe({next:function(t){a||(a=!0,s++),i[u]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&a||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},c=0;c<r;c++)u(c);else n.complete()}))}var tt=n(4156);function et(t,e,n,i){return(0,tt.m)(n)&&(i=n,n=void 0),i?et(t,e,n).pipe((0,L.U)((function(t){return(0,D.k)(t)?i.apply(void 0,t):i(t)}))):new r.y((function(r){nt(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function nt(t,e,n,r,i){var o;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(t)){var s=t;t.addEventListener(e,n,i),o=function(){return s.removeEventListener(e,n,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(t)){var u=t;t.on(e,n),o=function(){return u.off(e,n)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(t)){var c=t;t.addListener(e,n),o=function(){return c.removeListener(e,n)}}else{if(!t||!t.length)throw new TypeError("Invalid event target");for(var a=0,h=t.length;a<h;a++)nt(t[a],e,n,r,i)}r.add(o)}function rt(t,e,n){return n?rt(t,e).pipe((0,L.U)((function(t){return(0,D.k)(t)?n.apply(void 0,t):n(t)}))):new r.y((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if((0,tt.m)(e))return function(){return e(i,r)}}))}function it(t,e,n,i,o){var s,u;if(1==arguments.length){var c=t;u=c.initialState,e=c.condition,n=c.iterate,s=c.resultSelector||C.y,o=c.scheduler}else void 0===i||(0,z.K)(i)?(u=t,s=C.y,o=i):(u=t,s=i);return new r.y((function(t){var r=u;if(o)return o.schedule(ot,0,{subscriber:t,iterate:n,condition:e,resultSelector:s,state:r});for(;;){if(e){var i=void 0;try{i=e(r)}catch(e){return void t.error(e)}if(!i){t.complete();break}}var c=void 0;try{c=s(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function ot(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function st(t,e,n){return void 0===e&&(e=H.E),void 0===n&&(n=H.E),(0,q.P)((function(){return t()?e:n}))}var ut=n(5812);function ct(t,e){return void 0===t&&(t=0),void 0===e&&(e=f.P),(!(0,ut.k)(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=f.P),new r.y((function(n){return n.add(e.schedule(at,t,{subscriber:n,counter:0,period:t})),n}))}function at(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}var ht=n(4370),lt=new r.y(N.Z);function ft(){return lt}var pt=n(8170);function dt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return H.E;var n=t[0],i=t.slice(1);return 1===t.length&&(0,D.k)(n)?dt.apply(void 0,n):new r.y((function(t){var e=function(){return t.add(dt.apply(void 0,i).subscribe(t))};return(0,G.D)(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function bt(t,e){return e?new r.y((function(n){var r=Object.keys(t),i=new S.w;return i.add(e.schedule(vt,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i})):new r.y((function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()}))}function vt(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}var yt=n(8463),mt=n(7843),wt=n(6008);function xt(t,e,n){return[(0,wt.h)(e,n)(new r.y((0,mt.s)(t))),(0,wt.h)((0,yt.f)(e,n))(new r.y((0,mt.s)(t)))]}var gt=n(8821);function _t(t,e,n){return void 0===t&&(t=0),new r.y((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(St,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function St(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}var Tt=n(4944),Et=n(9604);function It(t,e){return new r.y((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?(0,G.D)(i):H.E).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}var Nt=n(5080),Ct=n(8107),Ot=n(150)},364:(t,e,n)=>{n.d(e,{c:()=>s});var r=n(655),i=n(211),o=n(8760),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return r.ZT(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),o.w.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),o.w.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(i.xQ)},9233:(t,e,n)=>{n.d(e,{X:()=>s});var r=n(655),i=n(211),o=n(1016),s=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return r.ZT(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new o.N;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(i.xQ)},2632:(t,e,n)=>{n.d(e,{W:()=>r,P:()=>u});var r,i=n(5631),o=n(8170),s=n(4944);r||(r={});var u=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return(0,o.of)(this.value);case"E":return(0,s._)(this.error);case"C":return(0,i.c)()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}()},2772:(t,e,n)=>{n.d(e,{y:()=>h});var r=n(3642),i=n(979),o=n(3142),s=n(2174),u=n(5050),c=n(2561),a=n(150),h=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,u=function(t,e,n){if(t){if(t instanceof i.L)return t;if(t[o.b])return t[o.b]()}return t||e||n?new i.L(t,e,n):new i.L(s.c)}(t,e,n);if(r?u.add(r.call(u,this.source)):u.add(this.source||a.v.useDeprecatedSynchronousErrorHandling&&!u.syncErrorThrowable?this._subscribe(u):this._trySubscribe(u)),a.v.useDeprecatedSynchronousErrorHandling&&u.syncErrorThrowable&&(u.syncErrorThrowable=!1,u.syncErrorThrown))throw u.syncErrorValue;return u},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.v.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),(0,r._)(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=l(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[u.L]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:(0,c.U)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=l(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function l(t){if(t||(t=a.v.Promise||Promise),!t)throw new Error("no Promise impl found");return t}},2174:(t,e,n)=>{n.d(e,{c:()=>o});var r=n(150),i=n(1644),o={closed:!0,next:function(t){},error:function(t){if(r.v.useDeprecatedSynchronousErrorHandling)throw t;(0,i.z)(t)},complete:function(){}}},2039:(t,e,n)=>{n.d(e,{L:()=>i});var r=n(655),i=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(n(979).L)},2630:(t,e,n)=>{n.d(e,{t:()=>h});var r=n(655),i=n(211),o=n(2546),s=n(8760),u=n(9276),c=n(1016),a=n(8253),h=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return r.ZT(e,t),e.prototype.nextInfiniteTimeWindow=function(e){if(!this.isStopped){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift()}t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this.isStopped||(this._events.push(new l(this._getNow(),e)),this._trimBufferThenGetEvents()),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new c.N;if(this.isStopped||this.hasError?e=s.w.EMPTY:(this.observers.push(t),e=new a.W(this,t)),i&&t.add(t=new u.ht(t,i)),n)for(var h=0;h<o&&!t.closed;h++)t.next(r[h]);else for(h=0;h<o&&!t.closed;h++)t.next(r[h].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||o.c).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(i.xQ),l=function(){return function(t,e){this.time=t,this.value=e}}()},8725:(t,e,n)=>{n.d(e,{b:()=>r});var r=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}()},211:(t,e,n)=>{n.d(e,{Yc:()=>h,xQ:()=>l});var r=n(655),i=n(2772),o=n(979),s=n(8760),u=n(1016),c=n(8253),a=n(3142),h=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return r.ZT(e,t),e}(o.L),l=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return r.ZT(e,t),e.prototype[a.b]=function(){return new h(this)},e.prototype.lift=function(t){var e=new f(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new u.N;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new u.N;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new u.N;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new u.N;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new u.N;return this.hasError?(t.error(this.thrownError),s.w.EMPTY):this.isStopped?(t.complete(),s.w.EMPTY):(this.observers.push(t),new c.W(this,t))},e.prototype.asObservable=function(){var t=new i.y;return t.source=this,t},e.create=function(t,e){return new f(t,e)},e}(i.y),f=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return r.ZT(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):s.w.EMPTY},e}(l)},8253:(t,e,n)=>{n.d(e,{W:()=>i});var r=n(655),i=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return r.ZT(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(n(8760).w)},979:(t,e,n)=>{n.d(e,{L:()=>h});var r=n(655),i=n(4156),o=n(2174),s=n(8760),u=n(3142),c=n(150),a=n(1644),h=function(t){function e(n,r,i){var s=t.call(this)||this;switch(s.syncErrorValue=null,s.syncErrorThrown=!1,s.syncErrorThrowable=!1,s.isStopped=!1,arguments.length){case 0:s.destination=o.c;break;case 1:if(!n){s.destination=o.c;break}if("object"==typeof n){n instanceof e?(s.syncErrorThrowable=n.syncErrorThrowable,s.destination=n,n.add(s)):(s.syncErrorThrowable=!0,s.destination=new l(s,n));break}default:s.syncErrorThrowable=!0,s.destination=new l(s,n,r,i)}return s}return r.ZT(e,t),e.prototype[u.b]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(s.w),l=function(t){function e(e,n,r,s){var u,c=t.call(this)||this;c._parentSubscriber=e;var a=c;return(0,i.m)(n)?u=n:n&&(u=n.next,r=n.error,s=n.complete,n!==o.c&&(a=Object.create(n),(0,i.m)(a.unsubscribe)&&c.add(a.unsubscribe.bind(a)),a.unsubscribe=c.unsubscribe.bind(c))),c._context=a,c._next=u,c._error=r,c._complete=s,c}return r.ZT(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;c.v.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=c.v.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):(0,a.z)(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;(0,a.z)(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};c.v.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),c.v.useDeprecatedSynchronousErrorHandling)throw t;(0,a.z)(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!c.v.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return c.v.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):((0,a.z)(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(h)},8760:(t,e,n)=>{n.d(e,{w:()=>u});var r=n(9026),i=n(2009),o=n(4156),s=n(8782),u=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._ctorUnsubscribe=!0,this._unsubscribe=t)}var e;return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this,u=n._parentOrParents,a=n._ctorUnsubscribe,h=n._unsubscribe,l=n._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,u instanceof t)u.remove(this);else if(null!==u)for(var f=0;f<u.length;++f)u[f].remove(this);if((0,o.m)(h)){a&&(this._unsubscribe=void 0);try{h.call(this)}catch(t){e=t instanceof s.B?c(t.errors):[t]}}if((0,r.k)(l)){f=-1;for(var p=l.length;++f<p;){var d=l[f];if((0,i.K)(d))try{d.unsubscribe()}catch(t){e=e||[],t instanceof s.B?e=e.concat(c(t.errors)):e.push(t)}}}if(e)throw new s.B(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=((e=new t).closed=!0,e),t}();function c(t){return t.reduce((function(t,e){return t.concat(e instanceof s.B?e.errors:e)}),[])}},150:(t,e,n)=>{n.d(e,{v:()=>i});var r=!1,i={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack,r=t},get useDeprecatedSynchronousErrorHandling(){return r}}},7604:(t,e,n)=>{n.d(e,{IY:()=>u,Ds:()=>c,ft:()=>a});var r=n(655),i=n(979),o=n(2772),s=n(7843),u=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,n}return r.ZT(e,t),e.prototype._next=function(t){this.parent.notifyNext(t)},e.prototype._error=function(t){this.parent.notifyError(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(),this.unsubscribe()},e}(i.L),c=(i.L,function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(e,t),e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.destination.complete()},e}(i.L));function a(t,e){if(!e.closed)return t instanceof o.y?t.subscribe(e):(0,s.s)(t)(e)}i.L},3140:(t,e,n)=>{n.d(e,{c:()=>a,N:()=>h});var r=n(655),i=n(211),o=n(2772),s=n(979),u=n(8760),c=n(3018),a=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return r.ZT(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new u.w).add(this.source.subscribe(new l(this.getSubject(),this))),t.closed&&(this._connection=null,t=u.w.EMPTY)),t},e.prototype.refCount=function(){return(0,c.x)()(this)},e}(o.y),h=function(){var t=a.prototype;return{operator:{value:null},_refCount:{value:0,writable:!0},_subject:{value:null,writable:!0},_connection:{value:null,writable:!0},_subscribe:{value:t._subscribe},_isComplete:{value:t._isComplete,writable:!0},getSubject:{value:t.getSubject},connect:{value:t.connect},refCount:{value:t.refCount}}}(),l=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.ZT(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(i.Yc);s.L},5142:(t,e,n)=>{n.d(e,{aj:()=>h,Ms:()=>l});var r=n(655),i=n(7507),o=n(9026),s=n(2039),u=n(2080),c=n(3375),a={};function h(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=void 0,r=void 0;return(0,i.K)(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&(0,o.k)(t[0])&&(t=t[0]),(0,c.n)(t,r).lift(new l(n))}var l=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new f(t,this.resultSelector))},t}(),f=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return r.ZT(e,t),e.prototype._next=function(t){this.values.push(a),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add((0,u.D)(this,r,void 0,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n){var r=this.values,i=r[n],o=this.toRespond?i===a?--this.toRespond:this.toRespond:0;r[n]=e,0===o&&(this.resultSelector?this._tryResultSelector(r):this.destination.next(r.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.L)},9795:(t,e,n)=>{n.d(e,{z:()=>o});var r=n(8170),i=n(2257);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,i.u)()(r.of.apply(void 0,t))}},1410:(t,e,n)=>{n.d(e,{P:()=>s});var r=n(2772),i=n(5760),o=n(5631);function s(t){return new r.y((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?(0,i.D)(n):(0,o.c)()).subscribe(e)}))}},5631:(t,e,n)=>{n.d(e,{E:()=>i,c:()=>o});var r=n(2772),i=new r.y((function(t){return t.complete()}));function o(t){return t?function(t){return new r.y((function(e){return t.schedule((function(){return e.complete()}))}))}(t):i}},5760:(t,e,n)=>{n.d(e,{D:()=>s});var r=n(2772),i=n(7843),o=n(8107);function s(t,e){return e?(0,o.x)(t,e):t instanceof r.y?t:new r.y((0,i.s)(t))}},3375:(t,e,n)=>{n.d(e,{n:()=>s});var r=n(2772),i=n(6900),o=n(3109);function s(t,e){return e?(0,o.r)(t,e):new r.y((0,i.V)(t))}},4370:(t,e,n)=>{n.d(e,{T:()=>u});var r=n(2772),i=n(7507),o=n(2556),s=n(3375);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,u=null,c=t[t.length-1];return(0,i.K)(c)?(u=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof c&&(n=t.pop()),null===u&&1===t.length&&t[0]instanceof r.y?t[0]:(0,o.J)(n)((0,s.n)(t,u))}},8170:(t,e,n)=>{n.d(e,{of:()=>s});var r=n(7507),i=n(3375),o=n(3109);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return(0,r.K)(n)?(t.pop(),(0,o.r)(t,n)):(0,i.n)(t)}},8821:(t,e,n)=>{n.d(e,{S3:()=>c});var r=n(655),i=n(9026),o=n(3375),s=n(2039),u=n(2080);function c(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!(0,i.k)(t[0]))return t[0];t=t[0]}return(0,o.n)(t,void 0).lift(new a)}var a=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new h(t))},t}(),h=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return r.ZT(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=(0,u.D)(this,r,void 0,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n){if(!this.hasFirst){this.hasFirst=!0;for(var r=0;r<this.subscriptions.length;r++)if(r!==n){var i=this.subscriptions[r];i.unsubscribe(),this.remove(i)}this.subscriptions=null}this.destination.next(e)},e}(s.L)},4944:(t,e,n)=>{n.d(e,{_:()=>i});var r=n(2772);function i(t,e){return e?new r.y((function(n){return e.schedule(o,0,{error:t,subscriber:n})})):new r.y((function(e){return e.error(t)}))}function o(t){var e=t.error;t.subscriber.error(e)}},9604:(t,e,n)=>{n.d(e,{H:()=>u});var r=n(2772),i=n(964),o=n(5812),s=n(7507);function u(t,e,n){void 0===t&&(t=0);var u=-1;return(0,o.k)(e)?u=Number(e)<1?1:Number(e):(0,s.K)(e)&&(n=e),(0,s.K)(n)||(n=i.P),new r.y((function(e){var r=(0,o.k)(t)?t:+t-n.now();return n.schedule(c,r,{index:0,period:u,subscriber:e})}))}function c(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}},5080:(t,e,n)=>{n.d(e,{$R:()=>a,mx:()=>h});var r=n(655),i=n(3375),o=n(9026),s=n(979),u=n(999),c=n(7604);function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),(0,i.n)(t,void 0).lift(new h(n))}var h=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new l(t,this.resultSelector))},t}(),l=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.resultSelector=n,i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:void 0,i}return r.ZT(e,t),e.prototype._next=function(t){var e=this.iterators;(0,o.k)(t)?e.push(new p(t)):"function"==typeof t[u.hZ]?e.push(new f(t[u.hZ]())):e.push(new d(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];r.stillUnsubscribed?this.destination.add(r.subscribe()):this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++)if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return;var i=!1,o=[];for(r=0;r<e;r++){var s,u=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),u.done)return void n.complete();o.push(u.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(s.L),f=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return Boolean(t&&t.done)},t}(),p=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[u.hZ]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),d=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return r.ZT(e,t),e.prototype[u.hZ]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t){this.buffer.push(t),this.parent.checkIterators()},e.prototype.subscribe=function(){return(0,c.ft)(this.observable,new c.IY(this))},e}(c.Ds)},2257:(t,e,n)=>{n.d(e,{u:()=>i});var r=n(2556);function i(){return(0,r.J)(1)}},6008:(t,e,n)=>{n.d(e,{h:()=>o});var r=n(655),i=n(979);function o(t,e){return function(n){return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.predicate,this.thisArg))},t}(),u=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return r.ZT(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(i.L)},1120:(t,e,n)=>{n.d(e,{v:()=>c,T:()=>f});var r=n(655),i=n(979),o=n(8760),s=n(2772),u=n(211);function c(t,e,n,r){return function(i){return i.lift(new a(t,e,n,r))}}var a=function(){function t(t,e,n,r){this.keySelector=t,this.elementSelector=e,this.durationSelector=n,this.subjectSelector=r}return t.prototype.call=function(t,e){return e.subscribe(new h(t,this.keySelector,this.elementSelector,this.durationSelector,this.subjectSelector))},t}(),h=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.keySelector=n,s.elementSelector=r,s.durationSelector=i,s.subjectSelector=o,s.groups=null,s.attemptedToUnsubscribe=!1,s.count=0,s}return r.ZT(e,t),e.prototype._next=function(t){var e;try{e=this.keySelector(t)}catch(t){return void this.error(t)}this._group(t,e)},e.prototype._group=function(t,e){var n=this.groups;n||(n=this.groups=new Map);var r,i=n.get(e);if(this.elementSelector)try{r=this.elementSelector(t)}catch(t){this.error(t)}else r=t;if(!i){i=this.subjectSelector?this.subjectSelector():new u.xQ,n.set(e,i);var o=new f(e,i,this);if(this.destination.next(o),this.durationSelector){var s=void 0;try{s=this.durationSelector(new f(e,i))}catch(t){return void this.error(t)}this.add(s.subscribe(new l(e,i,this)))}}i.closed||i.next(r)},e.prototype._error=function(t){var e=this.groups;e&&(e.forEach((function(e,n){e.error(t)})),e.clear()),this.destination.error(t)},e.prototype._complete=function(){var t=this.groups;t&&(t.forEach((function(t,e){t.complete()})),t.clear()),this.destination.complete()},e.prototype.removeGroup=function(t){this.groups.delete(t)},e.prototype.unsubscribe=function(){this.closed||(this.attemptedToUnsubscribe=!0,0===this.count&&t.prototype.unsubscribe.call(this))},e}(i.L),l=function(t){function e(e,n,r){var i=t.call(this,n)||this;return i.key=e,i.group=n,i.parent=r,i}return r.ZT(e,t),e.prototype._next=function(t){this.complete()},e.prototype._unsubscribe=function(){var t=this.parent,e=this.key;this.key=this.parent=null,t&&t.removeGroup(e)},e}(i.L),f=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return r.ZT(e,t),e.prototype._subscribe=function(t){var e=new o.w,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new p(n)),e.add(r.subscribe(t)),e},e}(s.y),p=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return r.ZT(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(o.w)},5709:(t,e,n)=>{n.d(e,{U:()=>o});var r=n(655),i=n(979);function o(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new s(t,e))}}var s=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.project,this.thisArg))},t}(),u=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return r.ZT(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(i.L)},2556:(t,e,n)=>{n.d(e,{J:()=>o});var r=n(7746),i=n(3608);function o(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),(0,r.zg)(i.y,t)}},7746:(t,e,n)=>{n.d(e,{zg:()=>u,VS:()=>h});var r=n(655),i=n(5709),o=n(5760),s=n(7604);function u(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?function(r){return r.pipe(u((function(n,r){return(0,o.D)(t(n,r)).pipe((0,i.U)((function(t,i){return e(n,t,r,i)})))}),n))}:("number"==typeof e&&(n=e),function(e){return e.lift(new c(t,n))})}var c=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new a(t,this.project,this.concurrent))},t}(),a=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return r.ZT(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new s.IY(this),n=this.destination;n.add(e);var r=(0,s.ft)(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(s.Ds),h=u},9276:(t,e,n)=>{n.d(e,{QV:()=>s,ht:()=>c});var r=n(655),i=n(979),o=n(2632);function s(t,e){return void 0===e&&(e=0),function(n){return n.lift(new u(t,e))}}var u=function(){function t(t,e){void 0===e&&(e=0),this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return e.subscribe(new c(t,this.scheduler,this.delay))},t}(),c=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return r.ZT(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new a(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(o.P.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(o.P.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(o.P.createComplete()),this.unsubscribe()},e}(i.L),a=function(){return function(t,e){this.notification=t,this.destination=e}}()},3018:(t,e,n)=>{n.d(e,{x:()=>o});var r=n(655),i=n(979);function o(){return function(t){return t.lift(new s(t))}}var s=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new u(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),u=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return r.ZT(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(i.L)},3109:(t,e,n)=>{n.d(e,{r:()=>o});var r=n(2772),i=n(8760);function o(t,e){return new r.y((function(n){var r=new i.w,o=0;return r.add(e.schedule((function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}},8107:(t,e,n)=>{n.d(e,{x:()=>h});var r=n(2772),i=n(8760),o=n(5050),s=n(3109),u=n(999),c=n(336),a=n(9217);function h(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[o.L]}(t))return function(t,e){return new r.y((function(n){var r=new i.w;return r.add(e.schedule((function(){var i=t[o.L]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if((0,c.t)(t))return function(t,e){return new r.y((function(n){var r=new i.w;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if((0,a.z)(t))return(0,s.r)(t,e);if(function(t){return t&&"function"==typeof t[u.hZ]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new r.y((function(n){var r,o=new i.w;return o.add((function(){r&&"function"==typeof r.return&&r.return()})),o.add(e.schedule((function(){r=t[u.hZ](),o.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),o}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}},6114:(t,e,n)=>{n.d(e,{o:()=>i});var r=n(655),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return r.ZT(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return r.ZT(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(n(8760).w))},8399:(t,e,n)=>{n.d(e,{v:()=>o});var r=n(655),i=n(8725),o=function(t){function e(n,r){void 0===r&&(r=i.b.now);var o=t.call(this,n,(function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()}))||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return r.ZT(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(i.b)},6650:(t,e,n)=>{n.d(e,{e:()=>h,E:()=>a});var r=n(655),i=1,o=function(){return Promise.resolve()}(),s={};function u(t){return t in s&&(delete s[t],!0)}var c=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.ZT(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=(c=e.flush.bind(e,null),a=i++,s[a]=!0,o.then((function(){return u(a)&&c()})),a)));var c,a},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(u(n),e.scheduled=void 0)},e}(n(6114).o),a=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(n(8399).v))(c),h=a},964:(t,e,n)=>{n.d(e,{z:()=>i,P:()=>o});var r=n(6114),i=new(n(8399).v)(r.o),o=i},2546:(t,e,n)=>{n.d(e,{c:()=>s,N:()=>o});var r=n(655),i=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return r.ZT(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(n(6114).o),o=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(e,t),e}(n(8399).v))(i),s=o},999:(t,e,n)=>{function r(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}n.d(e,{hZ:()=>i});var i=r()},5050:(t,e,n)=>{n.d(e,{L:()=>r});var r=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}()},3142:(t,e,n)=>{n.d(e,{b:()=>r});var r=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}()},6565:(t,e,n)=>{n.d(e,{W:()=>r});var r=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}()},6929:(t,e,n)=>{n.d(e,{K:()=>r});var r=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}()},1016:(t,e,n)=>{n.d(e,{N:()=>r});var r=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}()},1462:(t,e,n)=>{n.d(e,{W:()=>r});var r=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}()},8782:(t,e,n)=>{n.d(e,{B:()=>r});var r=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}()},3642:(t,e,n)=>{n.d(e,{_:()=>i});var r=n(979);function i(t){for(;t;){var e=t,n=e.closed,i=e.destination,o=e.isStopped;if(n||o)return!1;t=i&&i instanceof r.L?i:null}return!0}},1644:(t,e,n)=>{function r(t){setTimeout((function(){throw t}),0)}n.d(e,{z:()=>r})},3608:(t,e,n)=>{function r(t){return t}n.d(e,{y:()=>r})},9026:(t,e,n)=>{n.d(e,{k:()=>r});var r=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}()},9217:(t,e,n)=>{n.d(e,{z:()=>r});var r=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},4156:(t,e,n)=>{function r(t){return"function"==typeof t}n.d(e,{m:()=>r})},5812:(t,e,n)=>{n.d(e,{k:()=>i});var r=n(9026);function i(t){return!(0,r.k)(t)&&t-parseFloat(t)+1>=0}},2009:(t,e,n)=>{function r(t){return null!==t&&"object"==typeof t}n.d(e,{K:()=>r})},336:(t,e,n)=>{function r(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}n.d(e,{t:()=>r})},7507:(t,e,n)=>{function r(t){return t&&"function"==typeof t.schedule}n.d(e,{K:()=>r})},3306:(t,e,n)=>{function r(){}n.d(e,{Z:()=>r})},8463:(t,e,n)=>{function r(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}n.d(e,{f:()=>r})},2561:(t,e,n)=>{n.d(e,{z:()=>i,U:()=>o});var r=n(3608);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return 0===t.length?r.y:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}},7843:(t,e,n)=>{n.d(e,{s:()=>h});var r=n(6900),i=n(1644),o=n(999),s=n(5050),u=n(9217),c=n(336),a=n(2009),h=function(t){if(t&&"function"==typeof t[s.L])return h=t,function(t){var e=h[s.L]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if((0,u.z)(t))return(0,r.V)(t);if((0,c.t)(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,i.z),t};if(t&&"function"==typeof t[o.hZ])return e=t,function(t){for(var n=e[o.hZ]();;){var r=void 0;try{r=n.next()}catch(e){return t.error(e),t}if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,h,l=(0,a.K)(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+l+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")}},6900:(t,e,n)=>{n.d(e,{V:()=>r});var r=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}}},2080:(t,e,n)=>{n.d(e,{D:()=>u});var r=n(655),i=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return r.ZT(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(n(979).L),o=n(7843),s=n(2772);function u(t,e,n,r,u){if(void 0===u&&(u=new i(t,n,r)),!u.closed)return e instanceof s.y?e.subscribe(u):(0,o.s)(e)(u)}},1717:(t,e,n)=>{n.r(e),n.d(e,{audit:()=>o,auditTime:()=>h,buffer:()=>l,bufferCount:()=>b,bufferTime:()=>x,bufferToggle:()=>j,bufferWhen:()=>k,catchError:()=>A,combineAll:()=>W,combineLatest:()=>Y,concat:()=>U,concatAll:()=>K.u,concatMap:()=>q,concatMapTo:()=>H,count:()=>$,debounce:()=>X,debounceTime:()=>nt,defaultIfEmpty:()=>st,delay:()=>lt,delayWhen:()=>vt,dematerialize:()=>gt,distinct:()=>Tt,distinctUntilChanged:()=>Nt,distinctUntilKeyChanged:()=>jt,elementAt:()=>Bt,endWith:()=>Rt,every:()=>Ut,exhaust:()=>qt,exhaustMap:()=>Jt,expand:()=>ee,filter:()=>Zt.h,finalize:()=>ie,find:()=>ue,findIndex:()=>he,first:()=>fe,flatMap:()=>Q.VS,groupBy:()=>pe.v,ignoreElements:()=>de,isEmpty:()=>ye,last:()=>Se,map:()=>Gt.U,mapTo:()=>Te,materialize:()=>Ne,max:()=>Le,merge:()=>De,mergeAll:()=>ze.J,mergeMap:()=>Q.zg,mergeMapTo:()=>Me,mergeScan:()=>We,min:()=>Ye,multicast:()=>Ue,observeOn:()=>Qe.QV,onErrorResumeNext:()=>qe,pairwise:()=>Ge,partition:()=>en,pluck:()=>nn,publish:()=>sn,publishBehavior:()=>cn,publishLast:()=>hn,publishReplay:()=>fn,race:()=>dn,reduce:()=>Pe,refCount:()=>Nn.x,repeat:()=>bn,repeatWhen:()=>mn,retry:()=>gn,retryWhen:()=>Tn,sample:()=>Cn,sampleTime:()=>Vn,scan:()=>je,sequenceEqual:()=>Ln,share:()=>Wn,shareReplay:()=>Fn,single:()=>Bn,skip:()=>Un,skipLast:()=>qn,skipUntil:()=>Gn,skipWhile:()=>tr,startWith:()=>rr,subscribeOn:()=>ur,switchAll:()=>fr,switchMap:()=>ar,switchMapTo:()=>pr,take:()=>Mt,takeLast:()=>xe,takeUntil:()=>dr,takeWhile:()=>yr,tap:()=>_r,throttle:()=>Ir,throttleTime:()=>Or,throwIfEmpty:()=>Pt,timeInterval:()=>Pr,timeout:()=>Fr,timeoutWith:()=>Dr,timestamp:()=>Br,toArray:()=>Ur,window:()=>Kr,windowCount:()=>Hr,windowTime:()=>Jr,windowToggle:()=>oi,windowWhen:()=>ci,withLatestFrom:()=>li,zip:()=>bi,zipAll:()=>vi});var r=n(655),i=n(7604);function o(t){return function(e){return e.lift(new s(t))}}var s=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new u(t,this.durationSelector))},t}(),u=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.ZT(e,t),e.prototype._next=function(t){if(this.value=t,this.hasValue=!0,!this.throttled){var e=void 0;try{e=(0,this.durationSelector)(t)}catch(t){return this.destination.error(t)}var n=(0,i.ft)(e,new i.IY(this));!n||n.closed?this.clearThrottle():this.add(this.throttled=n)}},e.prototype.clearThrottle=function(){var t=this,e=t.value,n=t.hasValue,r=t.throttled;r&&(this.remove(r),this.throttled=void 0,r.unsubscribe()),n&&(this.value=void 0,this.hasValue=!1,this.destination.next(e))},e.prototype.notifyNext=function(){this.clearThrottle()},e.prototype.notifyComplete=function(){this.clearThrottle()},e}(i.Ds),c=n(964),a=n(9604);function h(t,e){return void 0===e&&(e=c.P),o((function(){return(0,a.H)(t,e)}))}function l(t){return function(e){return e.lift(new f(t))}}var f=function(){function t(t){this.closingNotifier=t}return t.prototype.call=function(t,e){return e.subscribe(new p(t,this.closingNotifier))},t}(),p=function(t){function e(e,n){var r=t.call(this,e)||this;return r.buffer=[],r.add((0,i.ft)(n,new i.IY(r))),r}return r.ZT(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype.notifyNext=function(){var t=this.buffer;this.buffer=[],this.destination.next(t)},e}(i.Ds),d=n(979);function b(t,e){return void 0===e&&(e=null),function(n){return n.lift(new v(t,e))}}var v=function(){function t(t,e){this.bufferSize=t,this.startBufferEvery=e,this.subscriberClass=e&&t!==e?m:y}return t.prototype.call=function(t,e){return e.subscribe(new this.subscriberClass(t,this.bufferSize,this.startBufferEvery))},t}(),y=function(t){function e(e,n){var r=t.call(this,e)||this;return r.bufferSize=n,r.buffer=[],r}return r.ZT(e,t),e.prototype._next=function(t){var e=this.buffer;e.push(t),e.length==this.bufferSize&&(this.destination.next(e),this.buffer=[])},e.prototype._complete=function(){var e=this.buffer;e.length>0&&this.destination.next(e),t.prototype._complete.call(this)},e}(d.L),m=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.bufferSize=n,i.startBufferEvery=r,i.buffers=[],i.count=0,i}return r.ZT(e,t),e.prototype._next=function(t){var e=this,n=e.bufferSize,r=e.startBufferEvery,i=e.buffers,o=e.count;this.count++,o%r==0&&i.push([]);for(var s=i.length;s--;){var u=i[s];u.push(t),u.length===n&&(i.splice(s,1),this.destination.next(u))}},e.prototype._complete=function(){for(var e=this.buffers,n=this.destination;e.length>0;){var r=e.shift();r.length>0&&n.next(r)}t.prototype._complete.call(this)},e}(d.L),w=n(7507);function x(t){var e=arguments.length,n=c.P;(0,w.K)(arguments[arguments.length-1])&&(n=arguments[arguments.length-1],e--);var r=null;e>=2&&(r=arguments[1]);var i=Number.POSITIVE_INFINITY;return e>=3&&(i=arguments[2]),function(e){return e.lift(new g(t,r,i,n))}}var g=function(){function t(t,e,n,r){this.bufferTimeSpan=t,this.bufferCreationInterval=e,this.maxBufferSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new S(t,this.bufferTimeSpan,this.bufferCreationInterval,this.maxBufferSize,this.scheduler))},t}(),_=function(){return function(){this.buffer=[]}}(),S=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.bufferTimeSpan=n,s.bufferCreationInterval=r,s.maxBufferSize=i,s.scheduler=o,s.contexts=[];var u=s.openContext();if(s.timespanOnly=null==r||r<0,s.timespanOnly){var c={subscriber:s,context:u,bufferTimeSpan:n};s.add(u.closeAction=o.schedule(T,n,c))}else{var a={subscriber:s,context:u},h={bufferTimeSpan:n,bufferCreationInterval:r,subscriber:s,scheduler:o};s.add(u.closeAction=o.schedule(I,n,a)),s.add(o.schedule(E,r,h))}return s}return r.ZT(e,t),e.prototype._next=function(t){for(var e,n=this.contexts,r=n.length,i=0;i<r;i++){var o=n[i],s=o.buffer;s.push(t),s.length==this.maxBufferSize&&(e=o)}e&&this.onBufferFull(e)},e.prototype._error=function(e){this.contexts.length=0,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts,n=this.destination;e.length>0;){var r=e.shift();n.next(r.buffer)}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.contexts=null},e.prototype.onBufferFull=function(t){this.closeContext(t);var e=t.closeAction;if(e.unsubscribe(),this.remove(e),!this.closed&&this.timespanOnly){t=this.openContext();var n=this.bufferTimeSpan,r={subscriber:this,context:t,bufferTimeSpan:n};this.add(t.closeAction=this.scheduler.schedule(T,n,r))}},e.prototype.openContext=function(){var t=new _;return this.contexts.push(t),t},e.prototype.closeContext=function(t){this.destination.next(t.buffer);var e=this.contexts;(e?e.indexOf(t):-1)>=0&&e.splice(e.indexOf(t),1)},e}(d.L);function T(t){var e=t.subscriber,n=t.context;n&&e.closeContext(n),e.closed||(t.context=e.openContext(),t.context.closeAction=this.schedule(t,t.bufferTimeSpan))}function E(t){var e=t.bufferCreationInterval,n=t.bufferTimeSpan,r=t.subscriber,i=t.scheduler,o=r.openContext();r.closed||(r.add(o.closeAction=i.schedule(I,n,{subscriber:r,context:o})),this.schedule(t,e))}function I(t){var e=t.subscriber,n=t.context;e.closeContext(n)}var N=n(8760),C=n(2080),O=n(2039);function j(t,e){return function(n){return n.lift(new V(t,e))}}var V=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Z(t,this.openings,this.closingSelector))},t}(),Z=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.closingSelector=r,i.contexts=[],i.add((0,C.D)(i,n)),i}return r.ZT(e,t),e.prototype._next=function(t){for(var e=this.contexts,n=e.length,r=0;r<n;r++)e[r].buffer.push(t)},e.prototype._error=function(e){for(var n=this.contexts;n.length>0;){var r=n.shift();r.subscription.unsubscribe(),r.buffer=null,r.subscription=null}this.contexts=null,t.prototype._error.call(this,e)},e.prototype._complete=function(){for(var e=this.contexts;e.length>0;){var n=e.shift();this.destination.next(n.buffer),n.subscription.unsubscribe(),n.buffer=null,n.subscription=null}this.contexts=null,t.prototype._complete.call(this)},e.prototype.notifyNext=function(t,e){t?this.closeBuffer(t):this.openBuffer(e)},e.prototype.notifyComplete=function(t){this.closeBuffer(t.context)},e.prototype.openBuffer=function(t){try{var e=this.closingSelector.call(this,t);e&&this.trySubscribe(e)}catch(t){this._error(t)}},e.prototype.closeBuffer=function(t){var e=this.contexts;if(e&&t){var n=t.buffer,r=t.subscription;this.destination.next(n),e.splice(e.indexOf(t),1),this.remove(r),r.unsubscribe()}},e.prototype.trySubscribe=function(t){var e=this.contexts,n=new N.w,r={buffer:[],subscription:n};e.push(r);var i=(0,C.D)(this,t,r);!i||i.closed?this.closeBuffer(r):(i.context=r,this.add(i),n.add(i))},e}(O.L);function k(t){return function(e){return e.lift(new P(t))}}var P=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new L(t,this.closingSelector))},t}(),L=function(t){function e(e,n){var r=t.call(this,e)||this;return r.closingSelector=n,r.subscribing=!1,r.openBuffer(),r}return r.ZT(e,t),e.prototype._next=function(t){this.buffer.push(t)},e.prototype._complete=function(){var e=this.buffer;e&&this.destination.next(e),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){this.buffer=void 0,this.subscribing=!1},e.prototype.notifyNext=function(){this.openBuffer()},e.prototype.notifyComplete=function(){this.subscribing?this.complete():this.openBuffer()},e.prototype.openBuffer=function(){var t=this.closingSubscription;t&&(this.remove(t),t.unsubscribe());var e,n=this.buffer;this.buffer&&this.destination.next(n),this.buffer=[];try{e=(0,this.closingSelector)()}catch(t){return this.error(t)}t=new N.w,this.closingSubscription=t,this.add(t),this.subscribing=!0,t.add((0,i.ft)(e,new i.IY(this))),this.subscribing=!1},e}(i.Ds);function A(t){return function(e){var n=new D(t),r=e.lift(n);return n.caught=r}}var D=function(){function t(t){this.selector=t}return t.prototype.call=function(t,e){return e.subscribe(new z(t,this.selector,this.caught))},t}(),z=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.selector=n,i.caught=r,i}return r.ZT(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=void 0;try{n=this.selector(e,this.caught)}catch(e){return void t.prototype.error.call(this,e)}this._unsubscribeAndRecycle();var r=new i.IY(this);this.add(r);var o=(0,i.ft)(n,r);o!==r&&this.add(o)}},e}(i.Ds),M=n(5142);function W(t){return function(e){return e.lift(new M.Ms(t))}}var F=n(9026),B=n(5760);function Y(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null;return"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&(0,F.k)(t[0])&&(t=t[0].slice()),function(e){return e.lift.call((0,B.D)([e].concat(t)),new M.Ms(n))}}var R=n(9795);function U(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(R.z.apply(void 0,[e].concat(t)))}}var K=n(2257),Q=n(7746);function q(t,e){return(0,Q.zg)(t,e,1)}function H(t,e){return q((function(){return t}),e)}function $(t){return function(e){return e.lift(new G(t,e))}}var G=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new J(t,this.predicate,this.source))},t}(),J=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.count=0,i.index=0,i}return r.ZT(e,t),e.prototype._next=function(t){this.predicate?this._tryPredicate(t):this.count++},e.prototype._tryPredicate=function(t){var e;try{e=this.predicate(t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e&&this.count++},e.prototype._complete=function(){this.destination.next(this.count),this.destination.complete()},e}(d.L);function X(t){return function(e){return e.lift(new tt(t))}}var tt=function(){function t(t){this.durationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new et(t,this.durationSelector))},t}(),et=function(t){function e(e,n){var r=t.call(this,e)||this;return r.durationSelector=n,r.hasValue=!1,r}return r.ZT(e,t),e.prototype._next=function(t){try{var e=this.durationSelector.call(this,t);e&&this._tryNext(t,e)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.emitValue(),this.destination.complete()},e.prototype._tryNext=function(t,e){var n=this.durationSubscription;this.value=t,this.hasValue=!0,n&&(n.unsubscribe(),this.remove(n)),(n=(0,i.ft)(e,new i.IY(this)))&&!n.closed&&this.add(this.durationSubscription=n)},e.prototype.notifyNext=function(){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){if(this.hasValue){var e=this.value,n=this.durationSubscription;n&&(this.durationSubscription=void 0,n.unsubscribe(),this.remove(n)),this.value=void 0,this.hasValue=!1,t.prototype._next.call(this,e)}},e}(i.Ds);function nt(t,e){return void 0===e&&(e=c.P),function(n){return n.lift(new rt(t,e))}}var rt=function(){function t(t,e){this.dueTime=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new it(t,this.dueTime,this.scheduler))},t}(),it=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.dueTime=n,i.scheduler=r,i.debouncedSubscription=null,i.lastValue=null,i.hasValue=!1,i}return r.ZT(e,t),e.prototype._next=function(t){this.clearDebounce(),this.lastValue=t,this.hasValue=!0,this.add(this.debouncedSubscription=this.scheduler.schedule(ot,this.dueTime,this))},e.prototype._complete=function(){this.debouncedNext(),this.destination.complete()},e.prototype.debouncedNext=function(){if(this.clearDebounce(),this.hasValue){var t=this.lastValue;this.lastValue=null,this.hasValue=!1,this.destination.next(t)}},e.prototype.clearDebounce=function(){var t=this.debouncedSubscription;null!==t&&(this.remove(t),t.unsubscribe(),this.debouncedSubscription=null)},e}(d.L);function ot(t){t.debouncedNext()}function st(t){return void 0===t&&(t=null),function(e){return e.lift(new ut(t))}}var ut=function(){function t(t){this.defaultValue=t}return t.prototype.call=function(t,e){return e.subscribe(new ct(t,this.defaultValue))},t}(),ct=function(t){function e(e,n){var r=t.call(this,e)||this;return r.defaultValue=n,r.isEmpty=!0,r}return r.ZT(e,t),e.prototype._next=function(t){this.isEmpty=!1,this.destination.next(t)},e.prototype._complete=function(){this.isEmpty&&this.destination.next(this.defaultValue),this.destination.complete()},e}(d.L);function at(t){return t instanceof Date&&!isNaN(+t)}var ht=n(2632);function lt(t,e){void 0===e&&(e=c.P);var n=at(t)?+t-e.now():Math.abs(t);return function(t){return t.lift(new ft(n,e))}}var ft=function(){function t(t,e){this.delay=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new pt(t,this.delay,this.scheduler))},t}(),pt=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.delay=n,i.scheduler=r,i.queue=[],i.active=!1,i.errored=!1,i}return r.ZT(e,t),e.dispatch=function(t){for(var e=t.source,n=e.queue,r=t.scheduler,i=t.destination;n.length>0&&n[0].time-r.now()<=0;)n.shift().notification.observe(i);if(n.length>0){var o=Math.max(0,n[0].time-r.now());this.schedule(t,o)}else this.unsubscribe(),e.active=!1},e.prototype._schedule=function(t){this.active=!0,this.destination.add(t.schedule(e.dispatch,this.delay,{source:this,destination:this.destination,scheduler:t}))},e.prototype.scheduleNotification=function(t){if(!0!==this.errored){var e=this.scheduler,n=new dt(e.now()+this.delay,t);this.queue.push(n),!1===this.active&&this._schedule(e)}},e.prototype._next=function(t){this.scheduleNotification(ht.P.createNext(t))},e.prototype._error=function(t){this.errored=!0,this.queue=[],this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.scheduleNotification(ht.P.createComplete()),this.unsubscribe()},e}(d.L),dt=function(){return function(t,e){this.time=t,this.notification=e}}(),bt=n(2772);function vt(t,e){return e?function(n){return new wt(n,e).lift(new yt(t))}:function(e){return e.lift(new yt(t))}}var yt=function(){function t(t){this.delayDurationSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new mt(t,this.delayDurationSelector))},t}(),mt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.delayDurationSelector=n,r.completed=!1,r.delayNotifierSubscriptions=[],r.index=0,r}return r.ZT(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(t),this.removeSubscription(i),this.tryComplete()},e.prototype.notifyError=function(t,e){this._error(t)},e.prototype.notifyComplete=function(t){var e=this.removeSubscription(t);e&&this.destination.next(e),this.tryComplete()},e.prototype._next=function(t){var e=this.index++;try{var n=this.delayDurationSelector(t,e);n&&this.tryDelay(n,t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.completed=!0,this.tryComplete(),this.unsubscribe()},e.prototype.removeSubscription=function(t){t.unsubscribe();var e=this.delayNotifierSubscriptions.indexOf(t);return-1!==e&&this.delayNotifierSubscriptions.splice(e,1),t.outerValue},e.prototype.tryDelay=function(t,e){var n=(0,C.D)(this,t,e);n&&!n.closed&&(this.destination.add(n),this.delayNotifierSubscriptions.push(n))},e.prototype.tryComplete=function(){this.completed&&0===this.delayNotifierSubscriptions.length&&this.destination.complete()},e}(O.L),wt=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subscriptionDelay=n,r}return r.ZT(e,t),e.prototype._subscribe=function(t){this.subscriptionDelay.subscribe(new xt(t,this.source))},e}(bt.y),xt=function(t){function e(e,n){var r=t.call(this)||this;return r.parent=e,r.source=n,r.sourceSubscribed=!1,r}return r.ZT(e,t),e.prototype._next=function(t){this.subscribeToSource()},e.prototype._error=function(t){this.unsubscribe(),this.parent.error(t)},e.prototype._complete=function(){this.unsubscribe(),this.subscribeToSource()},e.prototype.subscribeToSource=function(){this.sourceSubscribed||(this.sourceSubscribed=!0,this.unsubscribe(),this.source.subscribe(this.parent))},e}(d.L);function gt(){return function(t){return t.lift(new _t)}}var _t=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new St(t))},t}(),St=function(t){function e(e){return t.call(this,e)||this}return r.ZT(e,t),e.prototype._next=function(t){t.observe(this.destination)},e}(d.L);function Tt(t,e){return function(n){return n.lift(new Et(t,e))}}var Et=function(){function t(t,e){this.keySelector=t,this.flushes=e}return t.prototype.call=function(t,e){return e.subscribe(new It(t,this.keySelector,this.flushes))},t}(),It=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.keySelector=n,o.values=new Set,r&&o.add((0,i.ft)(r,new i.IY(o))),o}return r.ZT(e,t),e.prototype.notifyNext=function(){this.values.clear()},e.prototype.notifyError=function(t){this._error(t)},e.prototype._next=function(t){this.keySelector?this._useKeySelector(t):this._finalizeNext(t,t)},e.prototype._useKeySelector=function(t){var e,n=this.destination;try{e=this.keySelector(t)}catch(t){return void n.error(t)}this._finalizeNext(e,t)},e.prototype._finalizeNext=function(t,e){var n=this.values;n.has(t)||(n.add(t),this.destination.next(e))},e}(i.Ds);function Nt(t,e){return function(n){return n.lift(new Ct(t,e))}}var Ct=function(){function t(t,e){this.compare=t,this.keySelector=e}return t.prototype.call=function(t,e){return e.subscribe(new Ot(t,this.compare,this.keySelector))},t}(),Ot=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.keySelector=r,i.hasKey=!1,"function"==typeof n&&(i.compare=n),i}return r.ZT(e,t),e.prototype.compare=function(t,e){return t===e},e.prototype._next=function(t){var e;try{var n=this.keySelector;e=n?n(t):t}catch(t){return this.destination.error(t)}var r=!1;if(this.hasKey)try{r=(0,this.compare)(this.key,e)}catch(t){return this.destination.error(t)}else this.hasKey=!0;r||(this.key=e,this.destination.next(t))},e}(d.L);function jt(t,e){return Nt((function(n,r){return e?e(n[t],r[t]):n[t]===r[t]}))}var Vt=n(6565),Zt=n(6008),kt=n(6929);function Pt(t){return void 0===t&&(t=Dt),function(e){return e.lift(new Lt(t))}}var Lt=function(){function t(t){this.errorFactory=t}return t.prototype.call=function(t,e){return e.subscribe(new At(t,this.errorFactory))},t}(),At=function(t){function e(e,n){var r=t.call(this,e)||this;return r.errorFactory=n,r.hasValue=!1,r}return r.ZT(e,t),e.prototype._next=function(t){this.hasValue=!0,this.destination.next(t)},e.prototype._complete=function(){if(this.hasValue)return this.destination.complete();var t=void 0;try{t=this.errorFactory()}catch(e){t=e}this.destination.error(t)},e}(d.L);function Dt(){return new kt.K}var zt=n(5631);function Mt(t){return function(e){return 0===t?(0,zt.c)():e.lift(new Wt(t))}}var Wt=function(){function t(t){if(this.total=t,this.total<0)throw new Vt.W}return t.prototype.call=function(t,e){return e.subscribe(new Ft(t,this.total))},t}(),Ft=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.ZT(e,t),e.prototype._next=function(t){var e=this.total,n=++this.count;n<=e&&(this.destination.next(t),n===e&&(this.destination.complete(),this.unsubscribe()))},e}(d.L);function Bt(t,e){if(t<0)throw new Vt.W;var n=arguments.length>=2;return function(r){return r.pipe((0,Zt.h)((function(e,n){return n===t})),Mt(1),n?st(e):Pt((function(){return new Vt.W})))}}var Yt=n(8170);function Rt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return(0,R.z)(e,Yt.of.apply(void 0,t))}}function Ut(t,e){return function(n){return n.lift(new Kt(t,e,n))}}var Kt=function(){function t(t,e,n){this.predicate=t,this.thisArg=e,this.source=n}return t.prototype.call=function(t,e){return e.subscribe(new Qt(t,this.predicate,this.thisArg,this.source))},t}(),Qt=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.predicate=n,o.thisArg=r,o.source=i,o.index=0,o.thisArg=r||o,o}return r.ZT(e,t),e.prototype.notifyComplete=function(t){this.destination.next(t),this.destination.complete()},e.prototype._next=function(t){var e=!1;try{e=this.predicate.call(this.thisArg,t,this.index++,this.source)}catch(t){return void this.destination.error(t)}e||this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(d.L);function qt(){return function(t){return t.lift(new Ht)}}var Ht=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new $t(t))},t}(),$t=function(t){function e(e){var n=t.call(this,e)||this;return n.hasCompleted=!1,n.hasSubscription=!1,n}return r.ZT(e,t),e.prototype._next=function(t){this.hasSubscription||(this.hasSubscription=!0,this.add((0,i.ft)(t,new i.IY(this))))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete()},e.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.Ds),Gt=n(5709);function Jt(t,e){return e?function(n){return n.pipe(Jt((function(n,r){return(0,B.D)(t(n,r)).pipe((0,Gt.U)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new Xt(t))}}var Xt=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project))},t}(),te=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.hasSubscription=!1,r.hasCompleted=!1,r.index=0,r}return r.ZT(e,t),e.prototype._next=function(t){this.hasSubscription||this.tryNext(t)},e.prototype.tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.hasSubscription=!0,this._innerSub(e)},e.prototype._innerSub=function(t){var e=new i.IY(this),n=this.destination;n.add(e);var r=(0,i.ft)(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,this.hasSubscription||this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this.destination.next(t)},e.prototype.notifyError=function(t){this.destination.error(t)},e.prototype.notifyComplete=function(){this.hasSubscription=!1,this.hasCompleted&&this.destination.complete()},e}(i.Ds);function ee(t,e,n){return void 0===e&&(e=Number.POSITIVE_INFINITY),e=(e||0)<1?Number.POSITIVE_INFINITY:e,function(r){return r.lift(new ne(t,e,n))}}var ne=function(){function t(t,e,n){this.project=t,this.concurrent=e,this.scheduler=n}return t.prototype.call=function(t,e){return e.subscribe(new re(t,this.project,this.concurrent,this.scheduler))},t}(),re=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.scheduler=i,o.index=0,o.active=0,o.hasCompleted=!1,r<Number.POSITIVE_INFINITY&&(o.buffer=[]),o}return r.ZT(e,t),e.dispatch=function(t){var e=t.subscriber,n=t.result,r=t.value,i=t.index;e.subscribeToProjection(n,r,i)},e.prototype._next=function(t){var n=this.destination;if(n.closed)this._complete();else{var r=this.index++;if(this.active<this.concurrent){n.next(t);try{var i=(0,this.project)(t,r);if(this.scheduler){var o={subscriber:this,result:i,value:t,index:r};this.destination.add(this.scheduler.schedule(e.dispatch,0,o))}else this.subscribeToProjection(i,t,r)}catch(t){n.error(t)}}else this.buffer.push(t)}},e.prototype.subscribeToProjection=function(t,e,n){this.active++,this.destination.add((0,i.ft)(t,new i.IY(this)))},e.prototype._complete=function(){this.hasCompleted=!0,this.hasCompleted&&0===this.active&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t){this._next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t&&t.length>0&&this._next(t.shift()),this.hasCompleted&&0===this.active&&this.destination.complete()},e}(i.Ds);function ie(t){return function(e){return e.lift(new oe(t))}}var oe=function(){function t(t){this.callback=t}return t.prototype.call=function(t,e){return e.subscribe(new se(t,this.callback))},t}(),se=function(t){function e(e,n){var r=t.call(this,e)||this;return r.add(new N.w(n)),r}return r.ZT(e,t),e}(d.L);function ue(t,e){if("function"!=typeof t)throw new TypeError("predicate is not a function");return function(n){return n.lift(new ce(t,n,!1,e))}}var ce=function(){function t(t,e,n,r){this.predicate=t,this.source=e,this.yieldIndex=n,this.thisArg=r}return t.prototype.call=function(t,e){return e.subscribe(new ae(t,this.predicate,this.source,this.yieldIndex,this.thisArg))},t}(),ae=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.predicate=n,s.source=r,s.yieldIndex=i,s.thisArg=o,s.index=0,s}return r.ZT(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete(),this.unsubscribe()},e.prototype._next=function(t){var e=this.predicate,n=this.thisArg,r=this.index++;try{e.call(n||this,t,r,this.source)&&this.notifyComplete(this.yieldIndex?r:t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){this.notifyComplete(this.yieldIndex?-1:void 0)},e}(d.L);function he(t,e){return function(n){return n.lift(new ce(t,n,!0,e))}}var le=n(3608);function fe(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?(0,Zt.h)((function(e,n){return t(e,n,r)})):le.y,Mt(1),n?st(e):Pt((function(){return new kt.K})))}}var pe=n(1120);function de(){return function(t){return t.lift(new be)}}var be=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new ve(t))},t}(),ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return r.ZT(e,t),e.prototype._next=function(t){},e}(d.L);function ye(){return function(t){return t.lift(new me)}}var me=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new we(t))},t}(),we=function(t){function e(e){return t.call(this,e)||this}return r.ZT(e,t),e.prototype.notifyComplete=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype._next=function(t){this.notifyComplete(!1)},e.prototype._complete=function(){this.notifyComplete(!0)},e}(d.L);function xe(t){return function(e){return 0===t?(0,zt.c)():e.lift(new ge(t))}}var ge=function(){function t(t){if(this.total=t,this.total<0)throw new Vt.W}return t.prototype.call=function(t,e){return e.subscribe(new _e(t,this.total))},t}(),_e=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.ring=new Array,r.count=0,r}return r.ZT(e,t),e.prototype._next=function(t){var e=this.ring,n=this.total,r=this.count++;e.length<n?e.push(t):e[r%n]=t},e.prototype._complete=function(){var t=this.destination,e=this.count;if(e>0)for(var n=this.count>=this.total?this.total:this.count,r=this.ring,i=0;i<n;i++){var o=e++%n;t.next(r[o])}t.complete()},e}(d.L);function Se(t,e){var n=arguments.length>=2;return function(r){return r.pipe(t?(0,Zt.h)((function(e,n){return t(e,n,r)})):le.y,xe(1),n?st(e):Pt((function(){return new kt.K})))}}function Te(t){return function(e){return e.lift(new Ee(t))}}var Ee=function(){function t(t){this.value=t}return t.prototype.call=function(t,e){return e.subscribe(new Ie(t,this.value))},t}(),Ie=function(t){function e(e,n){var r=t.call(this,e)||this;return r.value=n,r}return r.ZT(e,t),e.prototype._next=function(t){this.destination.next(this.value)},e}(d.L);function Ne(){return function(t){return t.lift(new Ce)}}var Ce=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Oe(t))},t}(),Oe=function(t){function e(e){return t.call(this,e)||this}return r.ZT(e,t),e.prototype._next=function(t){this.destination.next(ht.P.createNext(t))},e.prototype._error=function(t){var e=this.destination;e.next(ht.P.createError(t)),e.complete()},e.prototype._complete=function(){var t=this.destination;t.next(ht.P.createComplete()),t.complete()},e}(d.L);function je(t,e){var n=!1;return arguments.length>=2&&(n=!0),function(r){return r.lift(new Ve(t,e,n))}}var Ve=function(){function t(t,e,n){void 0===n&&(n=!1),this.accumulator=t,this.seed=e,this.hasSeed=n}return t.prototype.call=function(t,e){return e.subscribe(new Ze(t,this.accumulator,this.seed,this.hasSeed))},t}(),Ze=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o._seed=r,o.hasSeed=i,o.index=0,o}return r.ZT(e,t),Object.defineProperty(e.prototype,"seed",{get:function(){return this._seed},set:function(t){this.hasSeed=!0,this._seed=t},enumerable:!0,configurable:!0}),e.prototype._next=function(t){if(this.hasSeed)return this._tryNext(t);this.seed=t,this.destination.next(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.accumulator(this.seed,t,n)}catch(t){this.destination.error(t)}this.seed=e,this.destination.next(e)},e}(d.L),ke=n(2561);function Pe(t,e){return arguments.length>=2?function(n){return(0,ke.z)(je(t,e),xe(1),st(e))(n)}:function(e){return(0,ke.z)(je((function(e,n,r){return t(e,n,r+1)})),xe(1))(e)}}function Le(t){return Pe("function"==typeof t?function(e,n){return t(e,n)>0?e:n}:function(t,e){return t>e?t:e})}var Ae=n(4370);function De(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(Ae.T.apply(void 0,[e].concat(t)))}}var ze=n(2556);function Me(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),"function"==typeof e?(0,Q.zg)((function(){return t}),e,n):("number"==typeof e&&(n=e),(0,Q.zg)((function(){return t}),n))}function We(t,e,n){return void 0===n&&(n=Number.POSITIVE_INFINITY),function(r){return r.lift(new Fe(t,e,n))}}var Fe=function(){function t(t,e,n){this.accumulator=t,this.seed=e,this.concurrent=n}return t.prototype.call=function(t,e){return e.subscribe(new Be(t,this.accumulator,this.seed,this.concurrent))},t}(),Be=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.accumulator=n,o.acc=r,o.concurrent=i,o.hasValue=!1,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return r.ZT(e,t),e.prototype._next=function(t){if(this.active<this.concurrent){var e=this.index++,n=this.destination,r=void 0;try{r=(0,this.accumulator)(this.acc,t,e)}catch(t){return n.error(t)}this.active++,this._innerSub(r)}else this.buffer.push(t)},e.prototype._innerSub=function(t){var e=new i.IY(this),n=this.destination;n.add(e);var r=(0,i.ft)(t,e);r!==e&&n.add(r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete()),this.unsubscribe()},e.prototype.notifyNext=function(t){var e=this.destination;this.acc=t,this.hasValue=!0,e.next(t)},e.prototype.notifyComplete=function(){var t=this.buffer;this.active--,t.length>0?this._next(t.shift()):0===this.active&&this.hasCompleted&&(!1===this.hasValue&&this.destination.next(this.acc),this.destination.complete())},e}(i.Ds);function Ye(t){return Pe("function"==typeof t?function(e,n){return t(e,n)<0?e:n}:function(t,e){return t<e?t:e})}var Re=n(3140);function Ue(t,e){return function(n){var r;if(r="function"==typeof t?t:function(){return t},"function"==typeof e)return n.lift(new Ke(r,e));var i=Object.create(n,Re.N);return i.source=n,i.subjectFactory=r,i}}var Ke=function(){function t(t,e){this.subjectFactory=t,this.selector=e}return t.prototype.call=function(t,e){var n=this.selector,r=this.subjectFactory(),i=n(r).subscribe(t);return i.add(e.subscribe(r)),i},t}(),Qe=n(9276);function qe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length&&(0,F.k)(t[0])&&(t=t[0]),function(e){return e.lift(new He(t))}}var He=function(){function t(t){this.nextSources=t}return t.prototype.call=function(t,e){return e.subscribe(new $e(t,this.nextSources))},t}(),$e=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.nextSources=n,r}return r.ZT(e,t),e.prototype.notifyError=function(){this.subscribeToNextSource()},e.prototype.notifyComplete=function(){this.subscribeToNextSource()},e.prototype._error=function(t){this.subscribeToNextSource(),this.unsubscribe()},e.prototype._complete=function(){this.subscribeToNextSource(),this.unsubscribe()},e.prototype.subscribeToNextSource=function(){var t=this.nextSources.shift();if(t){var e=new i.IY(this),n=this.destination;n.add(e);var r=(0,i.ft)(t,e);r!==e&&n.add(r)}else this.destination.complete()},e}(i.Ds);function Ge(){return function(t){return t.lift(new Je)}}var Je=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Xe(t))},t}(),Xe=function(t){function e(e){var n=t.call(this,e)||this;return n.hasPrev=!1,n}return r.ZT(e,t),e.prototype._next=function(t){var e;this.hasPrev?e=[this.prev,t]:this.hasPrev=!0,this.prev=t,e&&this.destination.next(e)},e}(d.L),tn=n(8463);function en(t,e){return function(n){return[(0,Zt.h)(t,e)(n),(0,Zt.h)((0,tn.f)(t,e))(n)]}}function nn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.length;if(0===n)throw new Error("list of properties cannot be empty.");return function(e){return(0,Gt.U)(rn(t,n))(e)}}function rn(t,e){return function(n){for(var r=n,i=0;i<e;i++){var o=null!=r?r[t[i]]:void 0;if(void 0===o)return;r=o}return r}}var on=n(211);function sn(t){return t?Ue((function(){return new on.xQ}),t):Ue(new on.xQ)}var un=n(9233);function cn(t){return function(e){return Ue(new un.X(t))(e)}}var an=n(364);function hn(){return function(t){return Ue(new an.c)(t)}}var ln=n(2630);function fn(t,e,n,r){n&&"function"!=typeof n&&(r=n);var i="function"==typeof n?n:void 0,o=new ln.t(t,e,r);return function(t){return Ue((function(){return o}),i)(t)}}var pn=n(8821);function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return 1===t.length&&(0,F.k)(t[0])&&(t=t[0]),e.lift.call(pn.S3.apply(void 0,[e].concat(t)))}}function bn(t){return void 0===t&&(t=-1),function(e){return 0===t?(0,zt.c)():t<0?e.lift(new vn(-1,e)):e.lift(new vn(t-1,e))}}var vn=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new yn(t,this.count,this.source))},t}(),yn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.ZT(e,t),e.prototype.complete=function(){if(!this.isStopped){var e=this.source,n=this.count;if(0===n)return t.prototype.complete.call(this);n>-1&&(this.count=n-1),e.subscribe(this._unsubscribeAndRecycle())}},e}(d.L);function mn(t){return function(e){return e.lift(new wn(t))}}var wn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new xn(t,this.notifier,e))},t}(),xn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i.sourceIsBeingSubscribedTo=!0,i}return r.ZT(e,t),e.prototype.notifyNext=function(){this.sourceIsBeingSubscribedTo=!0,this.source.subscribe(this)},e.prototype.notifyComplete=function(){if(!1===this.sourceIsBeingSubscribedTo)return t.prototype.complete.call(this)},e.prototype.complete=function(){if(this.sourceIsBeingSubscribedTo=!1,!this.isStopped){if(this.retries||this.subscribeToRetries(),!this.retriesSubscription||this.retriesSubscription.closed)return t.prototype.complete.call(this);this._unsubscribeAndRecycle(),this.notifications.next(void 0)}},e.prototype._unsubscribe=function(){var t=this.notifications,e=this.retriesSubscription;t&&(t.unsubscribe(),this.notifications=void 0),e&&(e.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},e.prototype._unsubscribeAndRecycle=function(){var e=this._unsubscribe;return this._unsubscribe=null,t.prototype._unsubscribeAndRecycle.call(this),this._unsubscribe=e,this},e.prototype.subscribeToRetries=function(){var e;this.notifications=new on.xQ;try{e=(0,this.notifier)(this.notifications)}catch(e){return t.prototype.complete.call(this)}this.retries=e,this.retriesSubscription=(0,i.ft)(e,new i.IY(this))},e}(i.Ds);function gn(t){return void 0===t&&(t=-1),function(e){return e.lift(new _n(t,e))}}var _n=function(){function t(t,e){this.count=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Sn(t,this.count,this.source))},t}(),Sn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.count=n,i.source=r,i}return r.ZT(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.source,r=this.count;if(0===r)return t.prototype.error.call(this,e);r>-1&&(this.count=r-1),n.subscribe(this._unsubscribeAndRecycle())}},e}(d.L);function Tn(t){return function(e){return e.lift(new En(t,e))}}var En=function(){function t(t,e){this.notifier=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new In(t,this.notifier,this.source))},t}(),In=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.notifier=n,i.source=r,i}return r.ZT(e,t),e.prototype.error=function(e){if(!this.isStopped){var n=this.errors,r=this.retries,o=this.retriesSubscription;if(r)this.errors=void 0,this.retriesSubscription=void 0;else{n=new on.xQ;try{r=(0,this.notifier)(n)}catch(e){return t.prototype.error.call(this,e)}o=(0,i.ft)(r,new i.IY(this))}this._unsubscribeAndRecycle(),this.errors=n,this.retries=r,this.retriesSubscription=o,n.next(e)}},e.prototype._unsubscribe=function(){var t=this.errors,e=this.retriesSubscription;t&&(t.unsubscribe(),this.errors=void 0),e&&(e.unsubscribe(),this.retriesSubscription=void 0),this.retries=void 0},e.prototype.notifyNext=function(){var t=this._unsubscribe;this._unsubscribe=null,this._unsubscribeAndRecycle(),this._unsubscribe=t,this.source.subscribe(this)},e}(i.Ds),Nn=n(3018);function Cn(t){return function(e){return e.lift(new On(t))}}var On=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new jn(t),r=e.subscribe(n);return r.add((0,i.ft)(this.notifier,new i.IY(n))),r},t}(),jn=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.hasValue=!1,e}return r.ZT(e,t),e.prototype._next=function(t){this.value=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.emitValue()},e.prototype.notifyComplete=function(){this.emitValue()},e.prototype.emitValue=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.value))},e}(i.Ds);function Vn(t,e){return void 0===e&&(e=c.P),function(n){return n.lift(new Zn(t,e))}}var Zn=function(){function t(t,e){this.period=t,this.scheduler=e}return t.prototype.call=function(t,e){return e.subscribe(new kn(t,this.period,this.scheduler))},t}(),kn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.period=n,i.scheduler=r,i.hasValue=!1,i.add(r.schedule(Pn,n,{subscriber:i,period:n})),i}return r.ZT(e,t),e.prototype._next=function(t){this.lastValue=t,this.hasValue=!0},e.prototype.notifyNext=function(){this.hasValue&&(this.hasValue=!1,this.destination.next(this.lastValue))},e}(d.L);function Pn(t){var e=t.subscriber,n=t.period;e.notifyNext(),this.schedule(t,n)}function Ln(t,e){return function(n){return n.lift(new An(t,e))}}var An=function(){function t(t,e){this.compareTo=t,this.comparator=e}return t.prototype.call=function(t,e){return e.subscribe(new Dn(t,this.compareTo,this.comparator))},t}(),Dn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.compareTo=n,i.comparator=r,i._a=[],i._b=[],i._oneComplete=!1,i.destination.add(n.subscribe(new zn(e,i))),i}return r.ZT(e,t),e.prototype._next=function(t){this._oneComplete&&0===this._b.length?this.emit(!1):(this._a.push(t),this.checkValues())},e.prototype._complete=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0,this.unsubscribe()},e.prototype.checkValues=function(){for(var t=this,e=t._a,n=t._b,r=t.comparator;e.length>0&&n.length>0;){var i=e.shift(),o=n.shift(),s=!1;try{s=r?r(i,o):i===o}catch(t){this.destination.error(t)}s||this.emit(!1)}},e.prototype.emit=function(t){var e=this.destination;e.next(t),e.complete()},e.prototype.nextB=function(t){this._oneComplete&&0===this._a.length?this.emit(!1):(this._b.push(t),this.checkValues())},e.prototype.completeB=function(){this._oneComplete?this.emit(0===this._a.length&&0===this._b.length):this._oneComplete=!0},e}(d.L),zn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.parent=n,r}return r.ZT(e,t),e.prototype._next=function(t){this.parent.nextB(t)},e.prototype._error=function(t){this.parent.error(t),this.unsubscribe()},e.prototype._complete=function(){this.parent.completeB(),this.unsubscribe()},e}(d.L);function Mn(){return new on.xQ}function Wn(){return function(t){return(0,Nn.x)()(Ue(Mn)(t))}}function Fn(t,e,n){var r;return r=t&&"object"==typeof t?t:{bufferSize:t,windowTime:e,refCount:!1,scheduler:n},function(t){return t.lift(function(t){var e,n,r=t.bufferSize,i=void 0===r?Number.POSITIVE_INFINITY:r,o=t.windowTime,s=void 0===o?Number.POSITIVE_INFINITY:o,u=t.refCount,c=t.scheduler,a=0,h=!1,l=!1;return function(t){var r;a++,!e||h?(h=!1,e=new ln.t(i,s,c),r=e.subscribe(this),n=t.subscribe({next:function(t){e.next(t)},error:function(t){h=!0,e.error(t)},complete:function(){l=!0,n=void 0,e.complete()}}),l&&(n=void 0)):r=e.subscribe(this),this.add((function(){a--,r.unsubscribe(),r=void 0,n&&!l&&u&&0===a&&(n.unsubscribe(),n=void 0,e=void 0)}))}}(r))}}function Bn(t){return function(e){return e.lift(new Yn(t,e))}}var Yn=function(){function t(t,e){this.predicate=t,this.source=e}return t.prototype.call=function(t,e){return e.subscribe(new Rn(t,this.predicate,this.source))},t}(),Rn=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.source=r,i.seenValue=!1,i.index=0,i}return r.ZT(e,t),e.prototype.applySingleValue=function(t){this.seenValue?this.destination.error("Sequence contains more than one element"):(this.seenValue=!0,this.singleValue=t)},e.prototype._next=function(t){var e=this.index++;this.predicate?this.tryNext(t,e):this.applySingleValue(t)},e.prototype.tryNext=function(t,e){try{this.predicate(t,e,this.source)&&this.applySingleValue(t)}catch(t){this.destination.error(t)}},e.prototype._complete=function(){var t=this.destination;this.index>0?(t.next(this.seenValue?this.singleValue:void 0),t.complete()):t.error(new kt.K)},e}(d.L);function Un(t){return function(e){return e.lift(new Kn(t))}}var Kn=function(){function t(t){this.total=t}return t.prototype.call=function(t,e){return e.subscribe(new Qn(t,this.total))},t}(),Qn=function(t){function e(e,n){var r=t.call(this,e)||this;return r.total=n,r.count=0,r}return r.ZT(e,t),e.prototype._next=function(t){++this.count>this.total&&this.destination.next(t)},e}(d.L);function qn(t){return function(e){return e.lift(new Hn(t))}}var Hn=function(){function t(t){if(this._skipCount=t,this._skipCount<0)throw new Vt.W}return t.prototype.call=function(t,e){return 0===this._skipCount?e.subscribe(new d.L(t)):e.subscribe(new $n(t,this._skipCount))},t}(),$n=function(t){function e(e,n){var r=t.call(this,e)||this;return r._skipCount=n,r._count=0,r._ring=new Array(n),r}return r.ZT(e,t),e.prototype._next=function(t){var e=this._skipCount,n=this._count++;if(n<e)this._ring[n]=t;else{var r=n%e,i=this._ring,o=i[r];i[r]=t,this.destination.next(o)}},e}(d.L);function Gn(t){return function(e){return e.lift(new Jn(t))}}var Jn=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){return e.subscribe(new Xn(t,this.notifier))},t}(),Xn=function(t){function e(e,n){var r=t.call(this,e)||this;r.hasValue=!1;var o=new i.IY(r);r.add(o),r.innerSubscription=o;var s=(0,i.ft)(n,o);return s!==o&&(r.add(s),r.innerSubscription=s),r}return r.ZT(e,t),e.prototype._next=function(e){this.hasValue&&t.prototype._next.call(this,e)},e.prototype.notifyNext=function(){this.hasValue=!0,this.innerSubscription&&this.innerSubscription.unsubscribe()},e.prototype.notifyComplete=function(){},e}(i.Ds);function tr(t){return function(e){return e.lift(new er(t))}}var er=function(){function t(t){this.predicate=t}return t.prototype.call=function(t,e){return e.subscribe(new nr(t,this.predicate))},t}(),nr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.predicate=n,r.skipping=!0,r.index=0,r}return r.ZT(e,t),e.prototype._next=function(t){var e=this.destination;this.skipping&&this.tryCallPredicate(t),this.skipping||e.next(t)},e.prototype.tryCallPredicate=function(t){try{var e=this.predicate(t,this.index++);this.skipping=Boolean(e)}catch(t){this.destination.error(t)}},e}(d.L);function rr(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return(0,w.K)(n)?(t.pop(),function(e){return(0,R.z)(t,e,n)}):function(e){return(0,R.z)(t,e)}}var ir=n(6650),or=n(5812),sr=function(t){function e(e,n,r){void 0===n&&(n=0),void 0===r&&(r=ir.e);var i=t.call(this)||this;return i.source=e,i.delayTime=n,i.scheduler=r,(!(0,or.k)(n)||n<0)&&(i.delayTime=0),r&&"function"==typeof r.schedule||(i.scheduler=ir.e),i}return r.ZT(e,t),e.create=function(t,n,r){return void 0===n&&(n=0),void 0===r&&(r=ir.e),new e(t,n,r)},e.dispatch=function(t){var e=t.source,n=t.subscriber;return this.add(e.subscribe(n))},e.prototype._subscribe=function(t){var n=this.delayTime,r=this.source;return this.scheduler.schedule(e.dispatch,n,{source:r,subscriber:t})},e}(bt.y);function ur(t,e){return void 0===e&&(e=0),function(n){return n.lift(new cr(t,e))}}var cr=function(){function t(t,e){this.scheduler=t,this.delay=e}return t.prototype.call=function(t,e){return new sr(e,this.delay,this.scheduler).subscribe(t)},t}();function ar(t,e){return"function"==typeof e?function(n){return n.pipe(ar((function(n,r){return(0,B.D)(t(n,r)).pipe((0,Gt.U)((function(t,i){return e(n,t,r,i)})))})))}:function(e){return e.lift(new hr(t))}}var hr=function(){function t(t){this.project=t}return t.prototype.call=function(t,e){return e.subscribe(new lr(t,this.project))},t}(),lr=function(t){function e(e,n){var r=t.call(this,e)||this;return r.project=n,r.index=0,r}return r.ZT(e,t),e.prototype._next=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this._innerSub(e)},e.prototype._innerSub=function(t){var e=this.innerSubscription;e&&e.unsubscribe();var n=new i.IY(this),r=this.destination;r.add(n),this.innerSubscription=(0,i.ft)(t,n),this.innerSubscription!==n&&r.add(this.innerSubscription)},e.prototype._complete=function(){var e=this.innerSubscription;e&&!e.closed||t.prototype._complete.call(this),this.unsubscribe()},e.prototype._unsubscribe=function(){this.innerSubscription=void 0},e.prototype.notifyComplete=function(){this.innerSubscription=void 0,this.isStopped&&t.prototype._complete.call(this)},e.prototype.notifyNext=function(t){this.destination.next(t)},e}(i.Ds);function fr(){return ar(le.y)}function pr(t,e){return e?ar((function(){return t}),e):ar((function(){return t}))}function dr(t){return function(e){return e.lift(new br(t))}}var br=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,e){var n=new vr(t),r=(0,i.ft)(this.notifier,new i.IY(n));return r&&!n.seenValue?(n.add(r),e.subscribe(n)):n},t}(),vr=function(t){function e(e){var n=t.call(this,e)||this;return n.seenValue=!1,n}return r.ZT(e,t),e.prototype.notifyNext=function(){this.seenValue=!0,this.complete()},e.prototype.notifyComplete=function(){},e}(i.Ds);function yr(t,e){return void 0===e&&(e=!1),function(n){return n.lift(new mr(t,e))}}var mr=function(){function t(t,e){this.predicate=t,this.inclusive=e}return t.prototype.call=function(t,e){return e.subscribe(new wr(t,this.predicate,this.inclusive))},t}(),wr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.inclusive=r,i.index=0,i}return r.ZT(e,t),e.prototype._next=function(t){var e,n=this.destination;try{e=this.predicate(t,this.index++)}catch(t){return void n.error(t)}this.nextOrComplete(t,e)},e.prototype.nextOrComplete=function(t,e){var n=this.destination;Boolean(e)?n.next(t):(this.inclusive&&n.next(t),n.complete())},e}(d.L),xr=n(3306),gr=n(4156);function _r(t,e,n){return function(r){return r.lift(new Sr(t,e,n))}}var Sr=function(){function t(t,e,n){this.nextOrObserver=t,this.error=e,this.complete=n}return t.prototype.call=function(t,e){return e.subscribe(new Tr(t,this.nextOrObserver,this.error,this.complete))},t}(),Tr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o._tapNext=xr.Z,o._tapError=xr.Z,o._tapComplete=xr.Z,o._tapError=r||xr.Z,o._tapComplete=i||xr.Z,(0,gr.m)(n)?(o._context=o,o._tapNext=n):n&&(o._context=n,o._tapNext=n.next||xr.Z,o._tapError=n.error||xr.Z,o._tapComplete=n.complete||xr.Z),o}return r.ZT(e,t),e.prototype._next=function(t){try{this._tapNext.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.next(t)},e.prototype._error=function(t){try{this._tapError.call(this._context,t)}catch(t){return void this.destination.error(t)}this.destination.error(t)},e.prototype._complete=function(){try{this._tapComplete.call(this._context)}catch(t){return void this.destination.error(t)}return this.destination.complete()},e}(d.L),Er={leading:!0,trailing:!1};function Ir(t,e){return void 0===e&&(e=Er),function(n){return n.lift(new Nr(t,!!e.leading,!!e.trailing))}}var Nr=function(){function t(t,e,n){this.durationSelector=t,this.leading=e,this.trailing=n}return t.prototype.call=function(t,e){return e.subscribe(new Cr(t,this.durationSelector,this.leading,this.trailing))},t}(),Cr=function(t){function e(e,n,r,i){var o=t.call(this,e)||this;return o.destination=e,o.durationSelector=n,o._leading=r,o._trailing=i,o._hasValue=!1,o}return r.ZT(e,t),e.prototype._next=function(t){this._hasValue=!0,this._sendValue=t,this._throttled||(this._leading?this.send():this.throttle(t))},e.prototype.send=function(){var t=this._hasValue,e=this._sendValue;t&&(this.destination.next(e),this.throttle(e)),this._hasValue=!1,this._sendValue=void 0},e.prototype.throttle=function(t){var e=this.tryDurationSelector(t);e&&this.add(this._throttled=(0,i.ft)(e,new i.IY(this)))},e.prototype.tryDurationSelector=function(t){try{return this.durationSelector(t)}catch(t){return this.destination.error(t),null}},e.prototype.throttlingDone=function(){var t=this._throttled,e=this._trailing;t&&t.unsubscribe(),this._throttled=void 0,e&&this.send()},e.prototype.notifyNext=function(){this.throttlingDone()},e.prototype.notifyComplete=function(){this.throttlingDone()},e}(i.Ds);function Or(t,e,n){return void 0===e&&(e=c.P),void 0===n&&(n=Er),function(r){return r.lift(new jr(t,e,n.leading,n.trailing))}}var jr=function(){function t(t,e,n,r){this.duration=t,this.scheduler=e,this.leading=n,this.trailing=r}return t.prototype.call=function(t,e){return e.subscribe(new Vr(t,this.duration,this.scheduler,this.leading,this.trailing))},t}(),Vr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.duration=n,s.scheduler=r,s.leading=i,s.trailing=o,s._hasTrailingValue=!1,s._trailingValue=null,s}return r.ZT(e,t),e.prototype._next=function(t){this.throttled?this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0):(this.add(this.throttled=this.scheduler.schedule(Zr,this.duration,{subscriber:this})),this.leading?this.destination.next(t):this.trailing&&(this._trailingValue=t,this._hasTrailingValue=!0))},e.prototype._complete=function(){this._hasTrailingValue?(this.destination.next(this._trailingValue),this.destination.complete()):this.destination.complete()},e.prototype.clearThrottle=function(){var t=this.throttled;t&&(this.trailing&&this._hasTrailingValue&&(this.destination.next(this._trailingValue),this._trailingValue=null,this._hasTrailingValue=!1),t.unsubscribe(),this.remove(t),this.throttled=null)},e}(d.L);function Zr(t){t.subscriber.clearThrottle()}var kr=n(1410);function Pr(t){return void 0===t&&(t=c.P),function(e){return(0,kr.P)((function(){return e.pipe(je((function(e,n){var r=e.current;return{value:n,current:t.now(),last:r}}),{current:t.now(),value:void 0,last:void 0}),(0,Gt.U)((function(t){var e=t.current,n=t.last,r=t.value;return new Lr(r,e-n)})))}))}}var Lr=function(){return function(t,e){this.value=t,this.interval=e}}(),Ar=n(1462);function Dr(t,e,n){return void 0===n&&(n=c.P),function(r){var i=at(t),o=i?+t-n.now():Math.abs(t);return r.lift(new zr(o,i,e,n))}}var zr=function(){function t(t,e,n,r){this.waitFor=t,this.absoluteTimeout=e,this.withObservable=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new Mr(t,this.absoluteTimeout,this.waitFor,this.withObservable,this.scheduler))},t}(),Mr=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;return s.absoluteTimeout=n,s.waitFor=r,s.withObservable=i,s.scheduler=o,s.scheduleTimeout(),s}return r.ZT(e,t),e.dispatchTimeout=function(t){var e=t.withObservable;t._unsubscribeAndRecycle(),t.add((0,i.ft)(e,new i.IY(t)))},e.prototype.scheduleTimeout=function(){var t=this.action;t?this.action=t.schedule(this,this.waitFor):this.add(this.action=this.scheduler.schedule(e.dispatchTimeout,this.waitFor,this))},e.prototype._next=function(e){this.absoluteTimeout||this.scheduleTimeout(),t.prototype._next.call(this,e)},e.prototype._unsubscribe=function(){this.action=void 0,this.scheduler=null,this.withObservable=null},e}(i.Ds),Wr=n(4944);function Fr(t,e){return void 0===e&&(e=c.P),Dr(t,(0,Wr._)(new Ar.W),e)}function Br(t){return void 0===t&&(t=c.P),(0,Gt.U)((function(e){return new Yr(e,t.now())}))}var Yr=function(){return function(t,e){this.value=t,this.timestamp=e}}();function Rr(t,e,n){return 0===n?[e]:(t.push(e),t)}function Ur(){return Pe(Rr,[])}function Kr(t){return function(e){return e.lift(new Qr(t))}}var Qr=function(){function t(t){this.windowBoundaries=t}return t.prototype.call=function(t,e){var n=new qr(t),r=e.subscribe(n);return r.closed||n.add((0,i.ft)(this.windowBoundaries,new i.IY(n))),r},t}(),qr=function(t){function e(e){var n=t.call(this,e)||this;return n.window=new on.xQ,e.next(n.window),n}return r.ZT(e,t),e.prototype.notifyNext=function(){this.openWindow()},e.prototype.notifyError=function(t){this._error(t)},e.prototype.notifyComplete=function(){this._complete()},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t)},e.prototype._complete=function(){this.window.complete(),this.destination.complete()},e.prototype._unsubscribe=function(){this.window=null},e.prototype.openWindow=function(){var t=this.window;t&&t.complete();var e=this.destination,n=this.window=new on.xQ;e.next(n)},e}(i.Ds);function Hr(t,e){return void 0===e&&(e=0),function(n){return n.lift(new $r(t,e))}}var $r=function(){function t(t,e){this.windowSize=t,this.startWindowEvery=e}return t.prototype.call=function(t,e){return e.subscribe(new Gr(t,this.windowSize,this.startWindowEvery))},t}(),Gr=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.destination=e,i.windowSize=n,i.startWindowEvery=r,i.windows=[new on.xQ],i.count=0,e.next(i.windows[0]),i}return r.ZT(e,t),e.prototype._next=function(t){for(var e=this.startWindowEvery>0?this.startWindowEvery:this.windowSize,n=this.destination,r=this.windowSize,i=this.windows,o=i.length,s=0;s<o&&!this.closed;s++)i[s].next(t);var u=this.count-r+1;if(u>=0&&u%e==0&&!this.closed&&i.shift().complete(),++this.count%e==0&&!this.closed){var c=new on.xQ;i.push(c),n.next(c)}},e.prototype._error=function(t){var e=this.windows;if(e)for(;e.length>0&&!this.closed;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){var t=this.windows;if(t)for(;t.length>0&&!this.closed;)t.shift().complete();this.destination.complete()},e.prototype._unsubscribe=function(){this.count=0,this.windows=null},e}(d.L);function Jr(t){var e=c.P,n=null,r=Number.POSITIVE_INFINITY;return(0,w.K)(arguments[3])&&(e=arguments[3]),(0,w.K)(arguments[2])?e=arguments[2]:(0,or.k)(arguments[2])&&(r=Number(arguments[2])),(0,w.K)(arguments[1])?e=arguments[1]:(0,or.k)(arguments[1])&&(n=Number(arguments[1])),function(i){return i.lift(new Xr(t,n,r,e))}}var Xr=function(){function t(t,e,n,r){this.windowTimeSpan=t,this.windowCreationInterval=e,this.maxWindowSize=n,this.scheduler=r}return t.prototype.call=function(t,e){return e.subscribe(new ei(t,this.windowTimeSpan,this.windowCreationInterval,this.maxWindowSize,this.scheduler))},t}(),ti=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._numberOfNextedValues=0,e}return r.ZT(e,t),e.prototype.next=function(e){this._numberOfNextedValues++,t.prototype.next.call(this,e)},Object.defineProperty(e.prototype,"numberOfNextedValues",{get:function(){return this._numberOfNextedValues},enumerable:!0,configurable:!0}),e}(on.xQ),ei=function(t){function e(e,n,r,i,o){var s=t.call(this,e)||this;s.destination=e,s.windowTimeSpan=n,s.windowCreationInterval=r,s.maxWindowSize=i,s.scheduler=o,s.windows=[];var u=s.openWindow();if(null!==r&&r>=0){var c={subscriber:s,window:u,context:null},a={windowTimeSpan:n,windowCreationInterval:r,subscriber:s,scheduler:o};s.add(o.schedule(ii,n,c)),s.add(o.schedule(ri,r,a))}else{var h={subscriber:s,window:u,windowTimeSpan:n};s.add(o.schedule(ni,n,h))}return s}return r.ZT(e,t),e.prototype._next=function(t){for(var e=this.windows,n=e.length,r=0;r<n;r++){var i=e[r];i.closed||(i.next(t),i.numberOfNextedValues>=this.maxWindowSize&&this.closeWindow(i))}},e.prototype._error=function(t){for(var e=this.windows;e.length>0;)e.shift().error(t);this.destination.error(t)},e.prototype._complete=function(){for(var t=this.windows;t.length>0;){var e=t.shift();e.closed||e.complete()}this.destination.complete()},e.prototype.openWindow=function(){var t=new ti;return this.windows.push(t),this.destination.next(t),t},e.prototype.closeWindow=function(t){t.complete();var e=this.windows;e.splice(e.indexOf(t),1)},e}(d.L);function ni(t){var e=t.subscriber,n=t.windowTimeSpan,r=t.window;r&&e.closeWindow(r),t.window=e.openWindow(),this.schedule(t,n)}function ri(t){var e=t.windowTimeSpan,n=t.subscriber,r=t.scheduler,i=t.windowCreationInterval,o=n.openWindow(),s=this,u={action:s,subscription:null},c={subscriber:n,window:o,context:u};u.subscription=r.schedule(ii,e,c),s.add(u.subscription),s.schedule(t,i)}function ii(t){var e=t.subscriber,n=t.window,r=t.context;r&&r.action&&r.subscription&&r.action.remove(r.subscription),e.closeWindow(n)}function oi(t,e){return function(n){return n.lift(new si(t,e))}}var si=function(){function t(t,e){this.openings=t,this.closingSelector=e}return t.prototype.call=function(t,e){return e.subscribe(new ui(t,this.openings,this.closingSelector))},t}(),ui=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.openings=n,i.closingSelector=r,i.contexts=[],i.add(i.openSubscription=(0,C.D)(i,n,n)),i}return r.ZT(e,t),e.prototype._next=function(t){var e=this.contexts;if(e)for(var n=e.length,r=0;r<n;r++)e[r].window.next(t)},e.prototype._error=function(e){var n=this.contexts;if(this.contexts=null,n)for(var r=n.length,i=-1;++i<r;){var o=n[i];o.window.error(e),o.subscription.unsubscribe()}t.prototype._error.call(this,e)},e.prototype._complete=function(){var e=this.contexts;if(this.contexts=null,e)for(var n=e.length,r=-1;++r<n;){var i=e[r];i.window.complete(),i.subscription.unsubscribe()}t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.contexts;if(this.contexts=null,t)for(var e=t.length,n=-1;++n<e;){var r=t[n];r.window.unsubscribe(),r.subscription.unsubscribe()}},e.prototype.notifyNext=function(t,e,n,r,i){if(t===this.openings){var o=void 0;try{o=(0,this.closingSelector)(e)}catch(t){return this.error(t)}var s=new on.xQ,u=new N.w,c={window:s,subscription:u};this.contexts.push(c);var a=(0,C.D)(this,o,c);a.closed?this.closeWindow(this.contexts.length-1):(a.context=c,u.add(a)),this.destination.next(s)}else this.closeWindow(this.contexts.indexOf(t))},e.prototype.notifyError=function(t){this.error(t)},e.prototype.notifyComplete=function(t){t!==this.openSubscription&&this.closeWindow(this.contexts.indexOf(t.context))},e.prototype.closeWindow=function(t){if(-1!==t){var e=this.contexts,n=e[t],r=n.window,i=n.subscription;e.splice(t,1),r.complete(),i.unsubscribe()}},e}(O.L);function ci(t){return function(e){return e.lift(new ai(t))}}var ai=function(){function t(t){this.closingSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new hi(t,this.closingSelector))},t}(),hi=function(t){function e(e,n){var r=t.call(this,e)||this;return r.destination=e,r.closingSelector=n,r.openWindow(),r}return r.ZT(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.openWindow(i)},e.prototype.notifyError=function(t){this._error(t)},e.prototype.notifyComplete=function(t){this.openWindow(t)},e.prototype._next=function(t){this.window.next(t)},e.prototype._error=function(t){this.window.error(t),this.destination.error(t),this.unsubscribeClosingNotification()},e.prototype._complete=function(){this.window.complete(),this.destination.complete(),this.unsubscribeClosingNotification()},e.prototype.unsubscribeClosingNotification=function(){this.closingNotification&&this.closingNotification.unsubscribe()},e.prototype.openWindow=function(t){void 0===t&&(t=null),t&&(this.remove(t),t.unsubscribe());var e=this.window;e&&e.complete();var n,r=this.window=new on.xQ;this.destination.next(r);try{n=(0,this.closingSelector)()}catch(t){return this.destination.error(t),void this.window.error(t)}this.add(this.closingNotification=(0,C.D)(this,n))},e}(O.L);function li(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){var n;"function"==typeof t[t.length-1]&&(n=t.pop());var r=t;return e.lift(new fi(r,n))}}var fi=function(){function t(t,e){this.observables=t,this.project=e}return t.prototype.call=function(t,e){return e.subscribe(new pi(t,this.observables,this.project))},t}(),pi=function(t){function e(e,n,r){var i=t.call(this,e)||this;i.observables=n,i.project=r,i.toRespond=[];var o=n.length;i.values=new Array(o);for(var s=0;s<o;s++)i.toRespond.push(s);for(s=0;s<o;s++){var u=n[s];i.add((0,C.D)(i,u,void 0,s))}return i}return r.ZT(e,t),e.prototype.notifyNext=function(t,e,n){this.values[n]=e;var r=this.toRespond;if(r.length>0){var i=r.indexOf(n);-1!==i&&r.splice(i,1)}},e.prototype.notifyComplete=function(){},e.prototype._next=function(t){if(0===this.toRespond.length){var e=[t].concat(this.values);this.project?this._tryProject(e):this.destination.next(e)}},e.prototype._tryProject=function(t){var e;try{e=this.project.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(O.L),di=n(5080);function bi(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return e.lift.call(di.$R.apply(void 0,[e].concat(t)))}}function vi(t){return function(e){return e.lift(new di.mx(t))}}},2947:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RobustUICompositeMachine=void 0;var r=n(4143),i=n(1717),o=function(){function t(){this.$outputStream=new r.Subject,this.$configurations=new r.BehaviorSubject(null),this.configurations=new Map}return t.prototype.onNewConfiguration=function(){return this.$configurations.asObservable().pipe(i.filter((function(t){return null!=t})))},t.prototype.initialize=function(){var t=this;this.machines.forEach((function(e,n){e.onNewConfiguration().subscribe((function(e){e.forEach((function(r){n==r.machine?t.configurations.set(r.machine,r.state):t.configurations.set(n,e)}));var r=[];t.configurations.forEach((function(t,e){r.push({machine:e,state:t})})),t.$configurations.next(r)})),e.outputs.forEach((function(n){e.getOutputStream(n.stream.toLowerCase()).subscribe((function(e){t.$outputStream.next({name:n.stream.toLowerCase(),value:e})}))}))}))},Object.defineProperty(t.prototype,"currentValue",{get:function(){var t=[];return this.configurations.forEach((function(e,n){t.push({machine:n,state:e})})),t},enumerable:!1,configurable:!0}),t.prototype.registerElement=function(t,e){var n=this;null!=e&&this.machines.forEach((function(r,i){var o=e.split("::");o[0]===i&&o.length>1?n.machines.get(i).registerElement(t,o[1]):o[0]===i&&1===o.length&&n.machines.get(i).registerElement(t)}))},t.prototype.unregisterElement=function(t,e){var n=this;null!=e&&this.machines.forEach((function(r,i){var o=e.split("::");o[0]===i&&o.length>1?n.machines.get(i).unregisterElement(t,o[1]):o[0]===i&&1===o.length&&n.machines.get(i).unregisterElement(t)}))},t.prototype.getOutputStream=function(t){return this.$outputStream.asObservable().pipe(i.filter((function(e){return e.name===t})),i.map((function(t){return t.value})))},t.prototype.sendInput=function(t,e){void 0===e&&(e=null),this.machines.forEach((function(n){n.sendInput(t,e)}))},t}();e.RobustUICompositeMachine=o},8631:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RobustUIMachine=void 0;var r=n(4143),i=n(1717),o=function(){function t(t){this.name=t,this.actionSubject=new r.Subject,this.outputStream=new Map,this.eventSubscriptions=[],this.configuration=new r.BehaviorSubject(null)}return Object.defineProperty(t.prototype,"currentValue",{get:function(){return[{machine:this.name,state:this.currentState.name}]},enumerable:!1,configurable:!0}),t.prototype.onNewConfiguration=function(){return this.configuration.asObservable().pipe(i.filter((function(t){return null!=t})))},t.prototype.initialize=function(){var t=this;if(this.currentState=this.machineDeclaration.states.find((function(e){return e.name==t.machineDeclaration.initialState})),!this.currentState)throw Error("Could not find a state definition for initial state ('"+this.machineDeclaration.initialState+"')");return this.machineDeclaration.outputs.forEach((function(e){t.outputStream.set(e.stream.toLowerCase(),new r.Subject)})),this.currentState},t.prototype.sendInput=function(t,e){void 0===e&&(e=null),this.transition(t)},t.prototype.getOutputStream=function(t){var e=this;return this.outputStream.get(t.toLowerCase()).asObservable().pipe(i.tap((function(t){e.finishTransition(t)})),i.map((function(t){return r.of(null!=t)})))},t.prototype.transition=function(t){var e=this.currentState.transitions.filter((function(e){return e.label.startsWith(t)}))[0];if(e)if(e.label.indexOf("/")>=0){var n=e.label.indexOf("/")+1,r=e.label.substr(n).replace("!","");this.outputStream.get(r).next(e)}else null!=this.outputs.find((function(t){return t.stream===e.label}))?this.outputStream.get(e.label).next(e):this.finishTransition(e)},t.prototype.when=function(t,e){return this.actionSubject.asObservable().pipe(i.filter((function(n){return n.state===t&&n.action===e})))},t.prototype.finishTransition=function(t){var e=this,n=this.machineDeclaration.states.find((function(e){return e.name===t.target}));if(n){this.actionSubject.next({action:"onTransition",state:this.currentState.name,target:t.target,label:t.label}),this.actionSubject.next({action:"onExit",state:this.currentState.name}),this.actionSubject.next({action:"onEnter",state:n.name}),this.currentState=n,this.configuration.next([{machine:this.name,state:this.currentState.name}]);var r=n.transitions.find((function(t){return null!=e.outputs.find((function(e){return e.stream===t.label}))}));return null!=r&&this.transition(r.label),n}},t.prototype.registerElement=function(t){var e=this;this.events.forEach((function(n){e.eventSubscriptions.push(r.fromEvent(t,n.stream).subscribe((function(t){e.transition(n.stream)})))}))},t.prototype.unregisterElement=function(t){this.eventSubscriptions.forEach((function(t){return t.unsubscribe()})),this.eventSubscriptions=[]},t}();e.RobustUIMachine=o},239:(t,e,n)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.RobustUISelectiveMachine=void 0;var r=n(4143),i=n(1717),o=function(){function t(){this.$inputStream=new r.Subject,this.$machineSwitch=new r.BehaviorSubject(null),this.configurations=new r.BehaviorSubject(null),this.$outputStream=new r.Subject,this.inputStream=this.$inputStream.asObservable(),this.machineSwitchStream=this.$machineSwitch.asObservable().pipe(i.filter((function(t){return null!=t}))),this.machineElements=new Map}return t.prototype.initialize=function(){var t=this;this.machines.forEach((function(e,n){e.onNewConfiguration().subscribe((function(r){t.activeMachine===n&&t.configurations.next(e.currentValue)})),e.outputs.forEach((function(n){e.getOutputStream(n.stream.toLowerCase()).subscribe((function(e){t.$outputStream.next({name:n.stream.toLowerCase(),value:e})}))}))}))},t.prototype.switchMachine=function(t){this.deactivateMachine(this.activeMachine),this.activeMachine=t,this.$machineSwitch.next(t),this.configurations.next(this.machines.get(t).currentValue),this.activateMachine(t)},t.prototype.onNewConfiguration=function(t){return null==t?this.configurations.asObservable().pipe(i.filter((function(t){return null!=t&&t.length>0}))):this.configurations.asObservable().pipe(i.filter((function(e){return null!=e&&e.length>0&&e[0].machine==t})))},t.prototype.sendInput=function(t,e){null!=this.inputs.find((function(e){return e.stream===t}))&&this.$inputStream.next(e)},t.prototype.getOutputStream=function(t){return this.$outputStream.asObservable().pipe(i.filter((function(e){return e.name===t})),i.map((function(t){return t.value})))},t.prototype.registerElement=function(t,e){this.machineElements.set(e,t)},t.prototype.unregisterElement=function(t,e){this.deactivateMachine(e),this.machineElements.delete(e)},t.prototype.activateMachine=function(t){var e=this;this.machineElements.forEach((function(n,r){var i=r.split("::");i[0]===t&&i.length>1?e.machines.get(t).registerElement(n,i[1]):i[0]===t&&1===i.length&&e.machines.get(t).registerElement(n)}))},t.prototype.deactivateMachine=function(t){var e=this;this.machineElements.forEach((function(n,r){var i=r.split("::");i[0]===t&&i.length>1?e.machines.get(t).unregisterElement(n,i[1]):i[0]===t&&1===i.length&&e.machines.get(t).unregisterElement(n)}))},t}();e.RobustUISelectiveMachine=o},8754:function(t,e,n){var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.dropdownElement=e.dropdown=e.DropDownComp=e.Toggle=e.usecasefour=void 0;var o=n(239),s=n(8631),u=n(2947),c=function(t){function e(){var e=t.call(this)||this;return e.machines=new Map,e.outputs=[],e.inputs=[{stream:"stream"}],e.events=[],e.machines.set("FAQ",new a("FAQ")),e.machines.set("dropdown",new h),e.initialize(),e.inputStream.subscribe((function(t){1==t?e.switchMachine("FAQ"):e.switchMachine("dropdown")})),e}return i(e,t),Object.defineProperty(e.prototype,"onMachineSwitch",{get:function(){return this.machineSwitchStream},enumerable:!1,configurable:!0}),e.prototype.onNewConfiguration=function(e){return t.prototype.onNewConfiguration.call(this,e)},e.prototype.getOutputStream=function(e){return t.prototype.getOutputStream.call(this,e)},e}(o.RobustUISelectiveMachine);e.usecasefour=c;var a=function(t){function e(e){var n=t.call(this,e)||this;return n.states=[{name:"off",transitions:[{target:"on",label:"click"}]},{name:"on",transitions:[{target:"off",label:"click"}]}],n.initialState="off",n.outputs=[],n.inputs=[],n.events=[{stream:"click"}],n.machineDeclaration={initialState:n.initialState,states:n.states,inputs:n.inputs,outputs:n.outputs},n.initialize(),n}return i(e,t),e.prototype.getOutputStream=function(e){return t.prototype.getOutputStream.call(this,e)},e.prototype.when=function(e,n){return t.prototype.when.call(this,e,n)},e}(s.RobustUIMachine);e.Toggle=a;var h=function(t){function e(){var e=t.call(this)||this;return e.machines=new Map,e.outputs=[],e.inputs=[],e.events=[],e.machines.set("toggle",new l("toggle")),e.machines.set("history",new f("history")),e.machines.set("contact",new f("contact")),e.machines.set("jobs",new f("jobs")),e.initialize(),e.machines.get("history").getOutputStream("close").subscribe((function(t){e.machines.get("toggle").sendInput("close")})),e.machines.get("contact").getOutputStream("close").subscribe((function(t){e.machines.get("toggle").sendInput("close")})),e.machines.get("jobs").getOutputStream("close").subscribe((function(t){e.machines.get("toggle").sendInput("close")})),e}return i(e,t),e.prototype.registerElement=function(e,n){t.prototype.registerElement.call(this,e,n)},e.prototype.unregisterElement=function(e,n){t.prototype.unregisterElement.call(this,e,n)},e.prototype.onNewConfiguration=function(){return t.prototype.onNewConfiguration.call(this)},e}(u.RobustUICompositeMachine);e.DropDownComp=h;var l=function(t){function e(e){var n=t.call(this,e)||this;return n.states=[{name:"notShow",transitions:[{target:"show",label:"click"}]},{name:"show",transitions:[{target:"notShow",label:"click"},{target:"notShow",label:"close"}]}],n.initialState="notShow",n.outputs=[],n.inputs=[{stream:"close"}],n.events=[{stream:"click"}],n.machineDeclaration={initialState:n.initialState,states:n.states,inputs:n.inputs,outputs:n.outputs},n.initialize(),n}return i(e,t),e.prototype.getOutputStream=function(e){return t.prototype.getOutputStream.call(this,e)},e.prototype.when=function(e,n){return t.prototype.when.call(this,e,n)},e}(s.RobustUIMachine);e.dropdown=l;var f=function(t){function e(e){var n=t.call(this,e)||this;return n.states=[{name:"notSelected",transitions:[{target:"Hovered",label:"pointerenter"}]},{name:"Hovered",transitions:[{target:"notSelected",label:"pointerenter/close!"},{target:"notSelected",label:"pointerleave"}]}],n.initialState="notSelected",n.outputs=[{stream:"close"}],n.inputs=[],n.events=[{stream:"pointerenter"},{stream:"pointerenter/close!"},{stream:"pointerleave"}],n.machineDeclaration={initialState:n.initialState,states:n.states,inputs:n.inputs,outputs:n.outputs},n.initialize(),n}return i(e,t),e.prototype.getOutputStream=function(e){return t.prototype.getOutputStream.call(this,e)},e.prototype.when=function(e,n){return t.prototype.when.call(this,e,n)},e}(s.RobustUIMachine);e.dropdownElement=f},655:(t,e,n)=>{n.d(e,{ZT:()=>i});var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t=n(8754),e=document.getElementById("input"),r=document.getElementById("dropdown"),i=document.getElementById("dropdownEl1"),o=document.getElementById("dropdownEl2"),s=document.getElementById("dropdownEl3"),u=document.getElementById("lock"),c=new t.usecasefour;function a(t,e){"notSelected"===e?t.classList.remove("hovered"):"Hovered"===e&&t.classList.add("hovered")}e.onchange=function(t){c.sendInput("stream",+e.value)},c.onNewConfiguration("toggle").subscribe((function(t){t.forEach((function(t){"toggle"===t.machine?"show"===t.state?document.getElementById("myDropdown").classList.add("show"):"notShow"===t.state&&document.getElementById("myDropdown").classList.remove("show"):"history"===t.machine?a(i,t.state):"contact"===t.machine?a(o,t.state):"jobs"===t.machine&&a(s,t.state)}))})),c.onNewConfiguration("FAQ").subscribe((function(t){console.log(t),t.forEach((function(t){"on"===t.state?u.classList.add("unlocked"):u.classList.remove("unlocked")}))})),c.onMachineSwitch.subscribe((function(t){"dropdown"===t?(c.registerElement(r,"dropdown::toggle"),c.registerElement(i,"dropdown::history"),c.registerElement(o,"dropdown::contact"),c.registerElement(s,"dropdown::jobs"),c.unregisterElement(u,"FAQ"),r.style.display="block",u.style.display="none"):"FAQ"===t&&(c.unregisterElement(r,"dropdown::toggle"),c.unregisterElement(i,"dropdown::history"),c.unregisterElement(o,"dropdown::contact"),c.unregisterElement(s,"dropdown::jobs"),c.registerElement(u,"FAQ"),r.style.display="none",u.style.display="block")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,